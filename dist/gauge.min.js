(function(e){function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}var t={};return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},r.n=function(e){var t=e&&e.__esModule?function(){return e['default']}:function(){return e};return r.d(t,'a',t),t},r.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},r.p='',r(r.s=16)})([function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(9),i=t(4),s=t(12),a=t(5),l=function(e){function r(t,o,n){switch(e.call(this),this.syncErrorValue=null,this.syncErrorThrown=!1,this.syncErrorThrowable=!1,this.isStopped=!1,arguments.length){case 0:this.destination=s.empty;break;case 1:if(!t){this.destination=s.empty;break}if('object'==typeof t){t instanceof r?(this.destination=t,this.destination.add(this)):(this.syncErrorThrowable=!0,this.destination=new u(this,t));break}default:this.syncErrorThrowable=!0,this.destination=new u(this,t,o,n);}}return o(r,e),r.prototype[a.rxSubscriber]=function(){return this},r.create=function(e,t,o){var n=new r(e,t,o);return n.syncErrorThrowable=!1,n},r.prototype.next=function(e){this.isStopped||this._next(e)},r.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},r.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},r.prototype._next=function(e){this.destination.next(e)},r.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},r.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},r.prototype._unsubscribeAndRecycle=function(){var e=this,r=e._parent,t=e._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=r,this._parents=t,this},r}(i.Subscription);r.Subscriber=l;var u=function(e){function r(r,t,o,i){e.call(this),this._parentSubscriber=r;var a,l=this;n.isFunction(t)?a=t:t&&(a=t.next,o=t.error,i=t.complete,t!==s.empty&&(l=Object.create(t),n.isFunction(l.unsubscribe)&&this.add(l.unsubscribe.bind(l)),l.unsubscribe=this.unsubscribe.bind(this))),this._context=l,this._next=a,this._error=o,this._complete=i}return o(r,e),r.prototype.next=function(e){if(!this.isStopped&&this._next){var r=this._parentSubscriber;r.syncErrorThrowable?this.__tryOrSetError(r,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},r.prototype.error=function(e){if(!this.isStopped){var r=this._parentSubscriber;if(this._error)r.syncErrorThrowable?(this.__tryOrSetError(r,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(!r.syncErrorThrowable)throw this.unsubscribe(),e;else r.syncErrorValue=e,r.syncErrorThrown=!0,this.unsubscribe()}},r.prototype.complete=function(){var e=this;if(!this.isStopped){var r=this._parentSubscriber;if(this._complete){var t=function(){return e._complete.call(e._context)};r.syncErrorThrowable?(this.__tryOrSetError(r,t),this.unsubscribe()):(this.__tryOrUnsub(t),this.unsubscribe())}else this.unsubscribe()}},r.prototype.__tryOrUnsub=function(e,r){try{e.call(this._context,r)}catch(e){throw this.unsubscribe(),e}},r.prototype.__tryOrSetError=function(e,r,t){try{r.call(this._context,t)}catch(r){return e.syncErrorValue=r,e.syncErrorThrown=!0,!0}return!1},r.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},r}(l)},function(e,r){'use strict';var t=Math.PI;Object.defineProperty(r,'__esModule',{value:!0}),r.SVG_HEIGHT=320,r.SVG_WIDTH=480,r.DRAW_ACCURACY=t/180,r.SCALE_START_ANGLE=-t/6,r.SCALE_END_ANGLE=7*t/6,r.SCALE_RATIO=[8,26,100],r.SCALE_PATH_COUNT=3,r.SCALE_CENTER_X=r.SVG_WIDTH/2,r.SCALE_CENTER_Y=r.SVG_HEIGHT/2-45,r.SCALE_RADIUS=170,r.TICKS_COUNT=7,r.TICKS_INDENT=8,r.TICKS_LENGTH=3,r.TICKS_TEXT_INDENT=3,r.TICKS_POSITION_INDENT=3.5,r.HAND_RADIUS=10,r.ANIMATION_DURATION=1500,r.ANIMATION_RATIO=[70,30],r.DAMPING_EQ_A=1,r.DAMPING_EQ_B=1,r.DAMPING_EQ_C=10,r.SVG_NAMESPACE='http://www.w3.org/2000/svg'},function(e,r,t){'use strict';(function(e){var t='undefined'!=typeof window&&window,o='undefined'!=typeof self&&'undefined'!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,n=t||'undefined'!=typeof e&&e||o;r.root=n,function(){if(!n)throw new Error('RxJS could not find any global context (window, self, global)')}()}).call(r,t(19))},function(e,r,t){'use strict';var o=t(2),n=t(20),i=t(13),s=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e)}return e.prototype.lift=function(r){var t=new e;return t.source=this,t.operator=r,t},e.prototype.subscribe=function(e,r,t){var o=this.operator,i=n.toSubscriber(e,r,t);if(o?o.call(i,this.source):i.add(this.source?this._subscribe(i):this._trySubscribe(i)),i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(r){e.syncErrorThrown=!0,e.syncErrorValue=r,e.error(r)}},e.prototype.forEach=function(e,r){var t=this;if(r||(o.root.Rx&&o.root.Rx.config&&o.root.Rx.config.Promise?r=o.root.Rx.config.Promise:o.root.Promise&&(r=o.root.Promise)),!r)throw new Error('no Promise impl found');return new r(function(r,o){var n=t.subscribe(function(r){if(n)try{e(r)}catch(e){o(e),n.unsubscribe()}else e(r)},o,r)})},e.prototype._subscribe=function(e){return this.source.subscribe(e)},e.prototype[i.observable]=function(){return this},e.create=function(r){return new e(r)},e}();r.Observable=s},function(e,r,t){'use strict';function o(e){return e.reduce(function(e,r){return e.concat(r instanceof u.UnsubscriptionError?r.errors:r)},[])}var n=t(21),i=t(10),s=t(9),a=t(22),l=t(11),u=t(23),c=function(){function e(e){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,e&&(this._unsubscribe=e)}return e.prototype.unsubscribe=function(){var e,r=!1;if(!this.closed){var t=this,c=t._parent,p=t._parents,d=t._unsubscribe,b=t._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var _=-1,g=p?p.length:0;c;)c.remove(this),c=++_<g&&p[_]||null;if(s.isFunction(d)){var y=a.tryCatch(d).call(this);y===l.errorObject&&(r=!0,e=e||(l.errorObject.e instanceof u.UnsubscriptionError?o(l.errorObject.e.errors):[l.errorObject.e]))}if(n.isArray(b))for(_=-1,g=b.length;++_<g;){var E=b[_];if(i.isObject(E)){var y=a.tryCatch(E.unsubscribe).call(E);if(y===l.errorObject){r=!0,e=e||[];var S=l.errorObject.e;S instanceof u.UnsubscriptionError?e=e.concat(o(S.errors)):e.push(S)}}}if(r)throw new u.UnsubscriptionError(e)}},e.prototype.add=function(r){if(!r||r===e.EMPTY)return e.EMPTY;if(r===this)return this;var t=r;switch(typeof r){case'function':t=new e(r);case'object':if(t.closed||'function'!=typeof t.unsubscribe)return t;if(this.closed)return t.unsubscribe(),t;if('function'!=typeof t._addParent){var o=t;t=new e,t._subscriptions=[o]}break;default:throw new Error('unrecognized teardown '+r+' added to Subscription.');}var n=this._subscriptions||(this._subscriptions=[]);return n.push(t),t._addParent(this),t},e.prototype.remove=function(e){var r=this._subscriptions;if(r){var t=r.indexOf(e);-1!==t&&r.splice(t,1)}},e.prototype._addParent=function(e){var r=this,t=r._parent,o=r._parents;t&&t!==e?o?-1===o.indexOf(e)&&o.push(e):this._parents=[e]:this._parent=e},e.EMPTY=function(e){return e.closed=!0,e}(new e),e}();r.Subscription=c},function(e,r,t){'use strict';var o=t(2),n=o.root.Symbol;r.rxSubscriber='function'==typeof n&&'function'==typeof n.for?n.for('rxSubscriber'):'@@rxSubscriber',r.$$rxSubscriber=r.rxSubscriber},function(e,r,t){'use strict';var o=Math.sin,n=Math.PI;Object.defineProperty(r,'__esModule',{value:!0});const s=t(1),i=t(45),a=t(15),l=t(46),u=t(47);r.default=new class{constructor(){var e=Math.max;this.correctionFactor=(...r)=>r.reduce((r,t)=>{const o=this.multiplier(r),n=this.multiplier(t);return e(o,n)},1),this.multiplier=(e)=>{const r=e.toString().split('.');return 2>r.length?1:Math.pow(10,r[1].length)},this.isEpsilon=(e=0)=>1e-10>Math.abs(e),this.formatNumber=(e=0)=>this.isEpsilon(e)?0:e,this.generateSlices=(e,r,t)=>{const o=this.calcCentralAngle(e,r),n=this.calcRatio.bind(this,o);return function*(){for(let r=0,o=0;r<t.length;){const i=n(t[r])-n(o),s=new a.default(e,e+i);yield s,e=s.endAngle,o=t[r],r++}}()},this.generateTicks=(e,r,t,o,n,a)=>{const l=this.polarToCartesian.bind(this,e,r),i=this.calcCentralAngle(t,o),c=this.calcStep(i,a);return function*(){for(let e=0,r=t;e<a;)yield new u.default(l(n,r),l(n+s.TICKS_LENGTH,r)),r+=c,e++}()},this.generateTexts=(r,t,o,i,a,u,c)=>{const p=this.calcCentralAngle(i,a),d=this.calcStep(p,u),b=this.calcStep(c,u),_=this.polarToCartesian.bind(this,r,t),g=this.radiansToDegree.bind(this),y=o+2*s.TICKS_INDENT+s.TICKS_LENGTH;return function*(){for(let r=0,t=c,o=a;r<u;)yield new l.default(Math.min(c-5,e(t-s.TICKS_POSITION_INDENT,5)),r.toString(),_(y+s.TICKS_TEXT_INDENT,o),g(n/2-o)),o-=d,t-=b,r++}()},this.calcRatio=(e=0,r=0)=>e*r/100,this.calcStep=(e=0,r=0)=>e/(r-1),this.calcCentralAngle=(e,r)=>e<r?r-e:e-r,this.radiansToDegree=(e)=>180*(e/n),this.polarToCartesian=(e=0,r=0,t=0,n=0)=>new i.default(e+this.multiply(t*Math.cos(n)),r+this.multiply(t*o(n))),this.radiansToHandPosition=(e)=>this.radiansToDegree(-1*(e-n/2))}multiply(...e){const r=e.map(this.formatNumber),t=this.correctionFactor(r);return r.map(this.formatNumber).reduce((e,r)=>e*t*(r*t)/(t*t),1)}damping(e){return s.DAMPING_EQ_A*(o(s.DAMPING_EQ_B*e)*Math.exp(-s.DAMPING_EQ_C*e))}}},function(e,r,t){'use strict';Object.defineProperty(r,'__esModule',{value:!0});const o=t(1);r.default=new class{constructor(){this.throttleOptions={leading:!0,trailing:!0},this.createShadowRoot=(e,r)=>{const t=document.createElement('template'),o=document.createElement('style'),n=document.createDocumentFragment();return t.innerHTML=e,o.innerHTML=r,n.appendChild(o),n.appendChild(t.content),n},this.createElement=(e,r=1)=>Array(r).fill(0).map(()=>document.createElementNS(o.SVG_NAMESPACE,e)).reduce((e,r)=>(e.appendChild(r),e),document.createDocumentFragment())}}},function(e,r,t){'use strict';Object.defineProperty(r,'__esModule',{value:!0}),t(18),t(25),t(27);const o=t(41),n=t(1);r.sliderValue$=new o.BehaviorSubject(n.SCALE_END_ANGLE)},function(e,r){'use strict';r.isFunction=function(e){return'function'==typeof e}},function(e,r){'use strict';r.isObject=function(e){return null!=e&&'object'==typeof e}},function(e,r){'use strict';r.errorObject={e:{}}},function(e,r){'use strict';r.empty={closed:!0,next:function(){},error:function(e){throw e},complete:function(){}}},function(e,r,t){'use strict';function o(e){var r,t=e.Symbol;return'function'==typeof t?t.observable?r=t.observable:(r=t('observable'),t.observable=r):r='@@observable',r}var n=t(2);r.getSymbolObservable=o,r.observable=o(n.root),r.$$observable=r.observable},function(e,r){'use strict';var t=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},o=function(e){function r(){var r=e.call(this,'object unsubscribed');this.name=r.name='ObjectUnsubscribedError',this.stack=r.stack,this.message=r.message}return t(r,e),r}(Error);r.ObjectUnsubscribedError=o},function(e,r){'use strict';Object.defineProperty(r,'__esModule',{value:!0});r.default=class{constructor(e=0,r=0){this.startAngle=e,this.endAngle=r}segment(){return Math.abs(this.startAngle-this.endAngle)}direction(){return this.startAngle>this.endAngle?-1:1}empty(){return+(0!=this.startAngle-this.endAngle)}}},function(e,r,t){'use strict';Object.defineProperty(r,'__esModule',{value:!0});const o=t(17);window.customElements.define('app-gauge',o.default)},function(e,r,t){'use strict';Object.defineProperty(r,'__esModule',{value:!0});const o=t(7),n=t(8),i=t(44),s=t(51),a=t(52);class l extends HTMLElement{static get observedAttributes(){return['value']}constructor(){super();const e=this.attachShadow({mode:'open'});this.root=o.default.createShadowRoot(a.default,s),this.svgEl=this.root.querySelector('svg'),this.renderer=new i.default(this.svgEl),this.render(),e.appendChild(this.root)}connectedCallback(){}attributeChangedCallback(e,r,t){'value'===e&&n.sliderValue$.next(+t)}render(){this.renderer.renderScale(),this.renderer.renderAxis(),this.renderer.renderHand()}}r.default=l},function(e,r,t){'use strict';var o=t(3),n=t(24);o.Observable.prototype.map=n.map},function(e){var r=function(){return this}();try{r=r||Function('return this')()||(1,eval)('this')}catch(t){'object'==typeof window&&(r=window)}e.exports=r},function(e,r,t){'use strict';var o=t(0),n=t(5),i=t(12);r.toSubscriber=function(e,r,t){if(e){if(e instanceof o.Subscriber)return e;if(e[n.rxSubscriber])return e[n.rxSubscriber]()}return e||r||t?new o.Subscriber(e,r,t):new o.Subscriber(i.empty)}},function(e,r){'use strict';r.isArray=Array.isArray||function(e){return e&&'number'==typeof e.length}},function(e,r,t){'use strict';function o(){try{return n.apply(this,arguments)}catch(r){return i.errorObject.e=r,i.errorObject}}var n,i=t(11);r.tryCatch=function(e){return n=e,o}},function(e,r){'use strict';var t=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},o=function(e){function r(r){e.call(this),this.errors=r;var t=Error.call(this,r?r.length+' errors occurred during unsubscription:\n  '+r.map(function(e,r){return r+1+') '+e.toString()}).join('\n  '):'');this.name=t.name='UnsubscriptionError',this.stack=t.stack,this.message=t.message}return t(r,e),r}(Error);r.UnsubscriptionError=o},function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(0);r.map=function(e,r){if('function'!=typeof e)throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');return this.lift(new i(e,r))};var i=function(){function e(e,r){this.project=e,this.thisArg=r}return e.prototype.call=function(e,r){return r.subscribe(new s(e,this.project,this.thisArg))},e}();r.MapOperator=i;var s=function(e){function r(r,t,o){e.call(this,r),this.project=t,this.count=0,this.thisArg=o||this}return o(r,e),r.prototype._next=function(e){var r;try{r=this.project.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}this.destination.next(r)},r}(n.Subscriber)},function(e,r,t){'use strict';var o=t(3),n=t(26);o.Observable.prototype.pairwise=n.pairwise},function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(0);r.pairwise=function(){return this.lift(new i)};var i=function(){function e(){}return e.prototype.call=function(e,r){return r.subscribe(new s(e))},e}(),s=function(e){function r(r){e.call(this,r),this.hasPrev=!1}return o(r,e),r.prototype._next=function(e){this.hasPrev?this.destination.next([this.prev,e]):this.hasPrev=!0,this.prev=e},r}(n.Subscriber)},function(e,r,t){'use strict';var o=t(3),n=t(28);o.Observable.prototype.throttleTime=n.throttleTime},function(e,r,t){'use strict';function o(e){var r=e.subscriber;r.clearThrottle()}var n=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},i=t(0),s=t(29),a=t(34);r.throttleTime=function(e,r,t){return void 0===r&&(r=s.async),void 0===t&&(t=a.defaultThrottleConfig),this.lift(new l(e,r,t.leading,t.trailing))};var l=function(){function e(e,r,t,o){this.duration=e,this.scheduler=r,this.leading=t,this.trailing=o}return e.prototype.call=function(e,r){return r.subscribe(new u(e,this.duration,this.scheduler,this.leading,this.trailing))},e}(),u=function(e){function r(r,t,o,n,i){e.call(this,r),this.duration=t,this.scheduler=o,this.leading=n,this.trailing=i,this._hasTrailingValue=!1,this._trailingValue=null}return n(r,e),r.prototype._next=function(e){this.throttled?this.trailing&&(this._trailingValue=e,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(o,this.duration,{subscriber:this})),this.leading&&this.destination.next(e))},r.prototype.clearThrottle=function(){var e=this.throttled;e&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),e.unsubscribe(),this.remove(e),this.throttled=null)},r}(i.Subscriber)},function(e,r,t){'use strict';var o=t(30),n=t(32);r.async=new n.AsyncScheduler(o.AsyncAction)},function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(2),i=t(31),s=function(e){function r(r,t){e.call(this,r,t),this.scheduler=r,this.work=t,this.pending=!1}return o(r,e),r.prototype.schedule=function(e,r){if(void 0===r&&(r=0),this.closed)return this;this.state=e,this.pending=!0;var t=this.id,o=this.scheduler;return null!=t&&(this.id=this.recycleAsyncId(o,t,r)),this.delay=r,this.id=this.id||this.requestAsyncId(o,this.id,r),this},r.prototype.requestAsyncId=function(e,r,t){return void 0===t&&(t=0),n.root.setInterval(e.flush.bind(e,this),t)},r.prototype.recycleAsyncId=function(e,r,t){return void 0===t&&(t=0),null!==t&&this.delay===t&&!1===this.pending?r:n.root.clearInterval(r)&&void 0||void 0},r.prototype.execute=function(e,r){if(this.closed)return new Error('executing a cancelled action');this.pending=!1;var t=this._execute(e,r);return t?t:void(!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null)))},r.prototype._execute=function(e){var r,t=!1;try{this.work(e)}catch(o){t=!0,r=!!o&&o||new Error(o)}if(t)return this.unsubscribe(),r},r.prototype._unsubscribe=function(){var e=this.id,r=this.scheduler,t=r.actions,o=t.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==o&&t.splice(o,1),null!=e&&(this.id=this.recycleAsyncId(r,e,null)),this.delay=null},r}(i.Action);r.AsyncAction=s},function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(4),i=function(e){function r(){e.call(this)}return o(r,e),r.prototype.schedule=function(e,r){return void 0===r&&(r=0),this},r}(n.Subscription);r.Action=i},function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(33),i=function(e){function r(){e.apply(this,arguments),this.actions=[],this.active=!1,this.scheduled=void 0}return o(r,e),r.prototype.flush=function(e){var r=this.actions;if(this.active)return void r.push(e);var t;this.active=!0;do if(t=e.execute(e.state,e.delay))break;while(e=r.shift());if(this.active=!1,t){for(;e=r.shift();)e.unsubscribe();throw t}},r}(n.Scheduler);r.AsyncScheduler=i},function(e,r){'use strict';var t=function(){function e(r,t){void 0===t&&(t=e.now),this.SchedulerAction=r,this.now=t}return e.prototype.schedule=function(e,r,t){return void 0===r&&(r=0),new this.SchedulerAction(this,e).schedule(t,r)},e.now=Date.now?Date.now:function(){return+new Date},e}();r.Scheduler=t},function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(35),i=t(36);r.defaultThrottleConfig={leading:!0,trailing:!1},r.throttle=function(e,t){return void 0===t&&(t=r.defaultThrottleConfig),this.lift(new s(e,t.leading,t.trailing))};var s=function(){function e(e,r,t){this.durationSelector=e,this.leading=r,this.trailing=t}return e.prototype.call=function(e,r){return r.subscribe(new a(e,this.durationSelector,this.leading,this.trailing))},e}(),a=function(e){function r(r,t,o,n){e.call(this,r),this.destination=r,this.durationSelector=t,this._leading=o,this._trailing=n,this._hasTrailingValue=!1}return o(r,e),r.prototype._next=function(e){if(this.throttled)this._trailing&&(this._hasTrailingValue=!0,this._trailingValue=e);else{var r=this.tryDurationSelector(e);r&&this.add(this.throttled=i.subscribeToResult(this,r)),this._leading&&(this.destination.next(e),this._trailing&&(this._hasTrailingValue=!0,this._trailingValue=e))}},r.prototype.tryDurationSelector=function(e){try{return this.durationSelector(e)}catch(e){return this.destination.error(e),null}},r.prototype._unsubscribe=function(){var e=this,r=e.throttled,t=e._trailingValue,o=e._hasTrailingValue,n=e._trailing;this._trailingValue=null,this._hasTrailingValue=!1,r&&(this.remove(r),this.throttled=null,r.unsubscribe())},r.prototype._sendTrailing=function(){var e=this,r=e.destination,t=e.throttled,o=e._trailing,n=e._trailingValue,i=e._hasTrailingValue;t&&o&&i&&(r.next(n),this._trailingValue=null,this._hasTrailingValue=!1)},r.prototype.notifyNext=function(){this._sendTrailing(),this._unsubscribe()},r.prototype.notifyComplete=function(){this._sendTrailing(),this._unsubscribe()},r}(n.OuterSubscriber)},function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(0),i=function(e){function r(){e.apply(this,arguments)}return o(r,e),r.prototype.notifyNext=function(e,r){this.destination.next(r)},r.prototype.notifyError=function(e){this.destination.error(e)},r.prototype.notifyComplete=function(){this.destination.complete()},r}(n.Subscriber);r.OuterSubscriber=i},function(e,r,t){'use strict';var o=t(2),n=t(37),i=t(38),s=t(10),a=t(3),l=t(39),u=t(40),c=t(13);r.subscribeToResult=function(e,r,t,p){var d=new u.InnerSubscriber(e,t,p);if(d.closed)return null;if(r instanceof a.Observable)return r._isScalar?(d.next(r.value),d.complete(),null):r.subscribe(d);if(n.isArrayLike(r)){for(var b=0,_=r.length;b<_&&!d.closed;b++)d.next(r[b]);d.closed||d.complete()}else{if(i.isPromise(r))return r.then(function(e){d.closed||(d.next(e),d.complete())},function(e){return d.error(e)}).then(null,function(e){o.root.setTimeout(function(){throw e})}),d;if(r&&'function'==typeof r[l.iterator]){var g=r[l.iterator]();do{var y=g.next();if(y.done){d.complete();break}if(d.next(y.value),d.closed)break}while(!0)}else if(r&&'function'==typeof r[c.observable]){var E=r[c.observable]();if('function'!=typeof E.subscribe)d.error(new TypeError('Provided object does not correctly implement Symbol.observable'));else return E.subscribe(new u.InnerSubscriber(e,t,p))}else{var S=s.isObject(r)?'an invalid object':'\''+r+'\'';d.error(new TypeError('You provided '+S+' where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.'))}}return null}},function(e,r){'use strict';r.isArrayLike=function(e){return e&&'number'==typeof e.length}},function(e,r){'use strict';r.isPromise=function(e){return e&&'function'!=typeof e.subscribe&&'function'==typeof e.then}},function(e,r,t){'use strict';function o(e){var r=e.Symbol;if('function'==typeof r)return r.iterator||(r.iterator=r('iterator polyfill')),r.iterator;var t=e.Set;if(t&&'function'==typeof new t()['@@iterator'])return'@@iterator';var o=e.Map;if(o)for(var n,s=Object.getOwnPropertyNames(o.prototype),a=0;a<s.length;++a)if(n=s[a],'entries'!==n&&'size'!==n&&o.prototype[n]===o.prototype.entries)return n;return'@@iterator'}var n=t(2);r.symbolIteratorPonyfill=o,r.iterator=o(n.root),r.$$iterator=r.iterator},function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(0),i=function(e){function r(r,t,o){e.call(this),this.parent=r,this.outerValue=t,this.outerIndex=o,this.index=0}return o(r,e),r.prototype._next=function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this.index++,this)},r.prototype._error=function(e){this.parent.notifyError(e,this),this.unsubscribe()},r.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},r}(n.Subscriber);r.InnerSubscriber=i},function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(42),i=t(14),s=function(e){function r(r){e.call(this),this._value=r}return o(r,e),Object.defineProperty(r.prototype,'value',{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),r.prototype._subscribe=function(r){var t=e.prototype._subscribe.call(this,r);return t&&!t.closed&&r.next(this._value),t},r.prototype.getValue=function(){if(this.hasError)throw this.thrownError;else if(this.closed)throw new i.ObjectUnsubscribedError;else return this._value},r.prototype.next=function(r){e.prototype.next.call(this,this._value=r)},r}(n.Subject);r.BehaviorSubject=s},function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(3),i=t(0),s=t(4),a=t(14),l=t(43),u=t(5),c=function(e){function r(r){e.call(this,r),this.destination=r}return o(r,e),r}(i.Subscriber);r.SubjectSubscriber=c;var p=function(e){function r(){e.call(this),this.observers=[],this.closed=!1,this.isStopped=!1,this.hasError=!1,this.thrownError=null}return o(r,e),r.prototype[u.rxSubscriber]=function(){return new c(this)},r.prototype.lift=function(e){var r=new d(this,this);return r.operator=e,r},r.prototype.next=function(e){if(this.closed)throw new a.ObjectUnsubscribedError;if(!this.isStopped)for(var r=this.observers,t=r.length,o=r.slice(),n=0;n<t;n++)o[n].next(e)},r.prototype.error=function(e){if(this.closed)throw new a.ObjectUnsubscribedError;this.hasError=!0,this.thrownError=e,this.isStopped=!0;for(var r=this.observers,t=r.length,o=r.slice(),n=0;n<t;n++)o[n].error(e);this.observers.length=0},r.prototype.complete=function(){if(this.closed)throw new a.ObjectUnsubscribedError;this.isStopped=!0;for(var e=this.observers,r=e.length,t=e.slice(),o=0;o<r;o++)t[o].complete();this.observers.length=0},r.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},r.prototype._trySubscribe=function(r){if(this.closed)throw new a.ObjectUnsubscribedError;else return e.prototype._trySubscribe.call(this,r)},r.prototype._subscribe=function(e){if(this.closed)throw new a.ObjectUnsubscribedError;else return this.hasError?(e.error(this.thrownError),s.Subscription.EMPTY):this.isStopped?(e.complete(),s.Subscription.EMPTY):(this.observers.push(e),new l.SubjectSubscription(this,e))},r.prototype.asObservable=function(){var e=new n.Observable;return e.source=this,e},r.create=function(e,r){return new d(e,r)},r}(n.Observable);r.Subject=p;var d=function(e){function r(r,t){e.call(this),this.destination=r,this.source=t}return o(r,e),r.prototype.next=function(e){var r=this.destination;r&&r.next&&r.next(e)},r.prototype.error=function(e){var r=this.destination;r&&r.error&&this.destination.error(e)},r.prototype.complete=function(){var e=this.destination;e&&e.complete&&this.destination.complete()},r.prototype._subscribe=function(e){var r=this.source;return r?this.source.subscribe(e):s.Subscription.EMPTY},r}(p);r.AnonymousSubject=d},function(e,r,t){'use strict';var o=this&&this.__extends||function(e,r){function t(){this.constructor=e}for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)},n=t(4),i=function(e){function r(r,t){e.call(this),this.subject=r,this.subscriber=t,this.closed=!1}return o(r,e),r.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e=this.subject,r=e.observers;if(this.subject=null,!(!r||0===r.length||e.isStopped||e.closed)){var t=r.indexOf(this.subscriber);-1!==t&&r.splice(t,1)}}},r}(n.Subscription);r.SubjectSubscription=i},function(e,r,t){'use strict';Object.defineProperty(r,'__esModule',{value:!0});const o=t(1),n=t(6),i=t(48),s=t(15),a=t(49),l=t(8),u=t(50);r.default=class{constructor(e){this.currentAngle=o.SCALE_END_ANGLE-(o.SCALE_END_ANGLE-o.SCALE_START_ANGLE)/2,this.centralAngle=n.default.calcCentralAngle(o.SCALE_START_ANGLE,o.SCALE_END_ANGLE),this.animateHand=(e)=>{a.default.animateHand((e)=>{this.elements.arrowEl.setAttribute('transform',i.default.describeRotation(e))},e,this.setCurrentAngle)},this.setCurrentAngle=(e)=>{this.currentAngle=e},this.elements=new u.default(e),this.handleRotating()}renderScale(){const e=n.default.generateSlices(o.SCALE_START_ANGLE,o.SCALE_END_ANGLE,o.SCALE_RATIO);Array.from(this.elements.gaugeScaleElements).forEach((r)=>{const t=e.next().value;r.setAttribute('d',i.default.describeArc(o.SCALE_CENTER_X,o.SCALE_CENTER_Y,o.SCALE_RADIUS,t.startAngle,t.endAngle))})}renderAxis(){this.renderTicks(),this.renderTexts()}renderHand(){const e=this.elements.gaugeHandElements.shift(),r=this.elements.gaugeHandElements.pop();e.setAttribute('cx',o.SCALE_CENTER_X.toString()),e.setAttribute('cy',o.SCALE_CENTER_Y.toString()),e.setAttribute('r',o.HAND_RADIUS.toString()),r.setAttribute('d',i.default.describeHand(o.SCALE_CENTER_X,o.SCALE_CENTER_Y,o.SCALE_RADIUS,o.HAND_RADIUS,o.TICKS_INDENT,o.TICKS_LENGTH))}handleRotating(){l.sliderValue$.throttleTime(20).map((e)=>new s.default(this.currentAngle,o.SCALE_END_ANGLE-n.default.calcRatio(this.centralAngle,e))).subscribe(this.animateHand)}renderTicks(){const e=n.default.generateTicks(o.SCALE_CENTER_X,o.SCALE_CENTER_Y,o.SCALE_START_ANGLE,o.SCALE_END_ANGLE,o.SCALE_RADIUS+o.TICKS_INDENT,o.TICKS_COUNT);Array.from(this.elements.gaugeLinesElements).forEach((r)=>{const t=r.setAttribute.bind(r),o=e.next().value;t('x1',o.p1.x),t('y1',o.p1.y),t('x2',o.p2.x),t('y2',o.p2.y)})}renderTexts(){this.elements.gaugeTextPathEl.setAttribute('d',i.default.describeArc(o.SCALE_CENTER_X,o.SCALE_CENTER_Y,o.SCALE_RADIUS+2*o.TICKS_INDENT+o.TICKS_LENGTH,o.SCALE_START_ANGLE,o.SCALE_END_ANGLE));const e=n.default.generateTexts(o.SCALE_CENTER_X,o.SCALE_CENTER_Y,o.SCALE_RADIUS,o.SCALE_START_ANGLE,o.SCALE_END_ANGLE,o.TICKS_COUNT,this.elements.gaugeScaleLength);Array.from(this.elements.gaugeTextsElements).forEach((r)=>{const t=r.firstElementChild,o=e.next().value;r.setAttribute('x',o.position.toString()),r.setAttribute('text-anchor','start'),r.setAttribute('transform',`
          translate(${2*o.point.x},0)
          scale(-1, 1)
          rotate(${o.degree} ${o.point.x} ${o.point.y})
        `),t.setAttribute('href','#gauge-text-path'),t.textContent=o.content})}}},function(e,r){'use strict';Object.defineProperty(r,'__esModule',{value:!0});r.default=class{constructor(e=0,r=0){this.x=e,this.y=r}}},function(e,r){'use strict';Object.defineProperty(r,'__esModule',{value:!0});r.default=class{constructor(e,r,t,o){this.position=e,this.content=r,this.point=t,this.degree=o}}},function(e,r){'use strict';Object.defineProperty(r,'__esModule',{value:!0});r.default=class{constructor(e,r){this.p1=e,this.p2=r}}},function(e,r,t){'use strict';Object.defineProperty(r,'__esModule',{value:!0});const o=t(1),n=t(6);r.default=new class{constructor(){this.describeArc=(e=0,r=0,t=0,i=0,s=0)=>{const a=n.default.calcCentralAngle(i,s),l=n.default.polarToCartesian.bind(n.default,e,r),u=Math.ceil(a/o.DRAW_ACCURACY);let c=i;return Array(u).fill(0).reduce((e)=>{const r=l(t,c);return c+=o.DRAW_ACCURACY,[...e,[`${r.x},${r.y}`]]},['M']).join(' ')},this.describeHand=(e,r,t,o,i,s)=>{const a=n.default.polarToCartesian(e,r,t+i+s,Math.PI/2);return`
      M${e-o/2} ${r}
      L${a.x}                  ${a.y},
      L${e+o/2} ${r}
      Z
    `},this.describeRotation=(e)=>`
      translate(${2*o.SCALE_CENTER_X},0)
      scale(-1, 1)
      rotate(
        ${n.default.radiansToHandPosition(e)}
        ${o.SCALE_CENTER_X} ${o.SCALE_CENTER_Y}
      )
    `}}},function(e,r,t){'use strict';Object.defineProperty(r,'__esModule',{value:!0});const o=t(6);r.default=new class{constructor(){this.animationId=0,this.movementAnimation={duration:750,fn:function(e,r){return e.startAngle+e.direction()*(r/this.duration)*e.segment()}},this.shakingAnimation={duration:350,fn:function(e,r){return e.endAngle+e.empty()*o.default.damping(r/this.duration)}},this.animations=[this.movementAnimation,this.shakingAnimation]}animateHand(e,r,t){this.cancelAnimation(),this.animations.reduce((t,o)=>t.then(()=>new Promise((t)=>this.animate((t)=>e(o.fn(r,t)),o.duration,t))),Promise.resolve()).then(()=>t(r.endAngle))}animate(e,r,t){const o=performance.now(),n=(i)=>{let s=Math.abs(i-o);s=s<r?s:r,e(s),s<r?this.requestAnimation(n):t()};this.requestAnimation(n)}requestAnimation(e){this.animationId=requestAnimationFrame(e)}cancelAnimation(){cancelAnimationFrame(this.animationId)}}},function(e,r,t){'use strict';Object.defineProperty(r,'__esModule',{value:!0});const o=t(1),n=t(7);class i{constructor(e){this.svgEl=e}get gaugeScaleElements(){return this.gaugeScaleGroupEl.hasChildNodes()||this.gaugeScaleGroupEl.appendChild(n.default.createElement('path',o.SCALE_PATH_COUNT)),[].slice.call(this.gaugeScaleGroupEl.children)}get gaugeLinesElements(){return this.gaugeLinesGroupEl.hasChildNodes()||this.gaugeLinesGroupEl.appendChild(n.default.createElement('line',o.TICKS_COUNT)),[].slice.call(this.gaugeLinesGroupEl.children)}get gaugeTextsElements(){return this.gaugeTextsGroupEl.hasChildNodes()||(this.gaugeTextsGroupEl.appendChild(n.default.createElement('text',o.TICKS_COUNT)),Array.from(this.gaugeTextsGroupEl.children).forEach((e)=>e.appendChild(n.default.createElement('textPath')))),[].slice.call(this.gaugeTextsGroupEl.children)}get gaugeHandElements(){return this.gaugeHandGroupEl.hasChildNodes()||(this.gaugeHandGroupEl.appendChild(n.default.createElement('circle')),this.gaugeHandGroupEl.appendChild(n.default.createElement('path'))),[].slice.call(this.gaugeHandGroupEl.children)}get arrowEl(){return this.gaugeHandElements.pop()}get gaugeScaleGroupEl(){return this.svgEl.querySelector('#gauge-scale-group')}get gaugeAxisGroupEl(){return this.svgEl.querySelector('#gauge-axis-group')}get gaugeLinesGroupEl(){return this.svgEl.querySelector('#gauge-lines-group')}get gaugeTextsGroupEl(){return this.svgEl.querySelector('#gauge-texts-group')}get gaugeTextPathEl(){return this.svgEl.querySelector('#gauge-text-path')}get gaugeScaleLength(){return this.gaugeTextPathEl.getTotalLength()}get gaugeHandGroupEl(){return this.svgEl.querySelector('#gauge-hand-group')}}r.default=i},function(e){e.exports=':host {\n  display: block;\n  height: 320px;\n  width: 480px;\n}\n\n.gauge {\n  transform-origin: 50% 50%;\n  transform: scale(1,-1);\n}\n\n#gauge-scale-group > path {\n  fill: transparent;\n  stroke-width: 4;\n  stroke-linecap: square;\n}\n\n#gauge-scale-group > path:nth-child(1) {\n  stroke: #fb000e;\n}\n\n#gauge-scale-group > path:nth-child(2) {\n  stroke: #fd9409;\n}\n\n#gauge-scale-group > path:nth-child(3) {\n  stroke: #535353;\n}\n\n#gauge-lines-group > line {\n  fill: none;\n  stroke-width: 2;\n  stroke-linecap: round;\n  stroke: #727272;\n}\n\n#gauge-texts-group > text {\n  font-family: Lucida Console, Courier, monospace;\n}\n\n#gauge-hand-group > circle,\n#gauge-hand-group > path {\n  fill: #1d84dd;\n}\n'},function(e,r){'use strict';Object.defineProperty(r,'__esModule',{value:!0}),r['default']='<svg version=\'1.1\'\n  xmlns=\'http://www.w3.org/2000/svg\'\n  viewBox=\'0 0 480 320\'\n  class=\'gauge\'\n  width=\'100%\'\n  height=\'100%\'\n>\n  <title>SVG Gauge</title>\n  <defs>\n    <path id="gauge-text-path"/>\n  </defs>\n\n  <g id=\'gauge-scale-group\'></g>\n\n  <g id=\'gauge-axis-group\'>\n    <g id=\'gauge-lines-group\'></g>\n    <g id=\'gauge-texts-group\'></g>\n  </g>\n  <g id=\'gauge-hand-group\'></g>\n</svg>\n'}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMTc3MWFmNzM3ZDlmNWU1Nzk0MjEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RhbnRzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9zeW1ib2wvcnhTdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9tYXRoLXNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2RvbS11dGlsLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9yeC11dGlsLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvZXJyb3JPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvT2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvc3ltYm9sL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RydWN0dXJlcy9zbGljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhdWdlL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2FkZC9vcGVyYXRvci9tYXAuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL3RvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC90cnlDYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvb3BlcmF0b3IvbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2FkZC9vcGVyYXRvci9wYWlyd2lzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9vcGVyYXRvci9wYWlyd2lzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9hZGQvb3BlcmF0b3IvdGhyb3R0bGVUaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL29wZXJhdG9yL3Rocm90dGxlVGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9zY2hlZHVsZXIvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvc2NoZWR1bGVyL0FzeW5jQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL3NjaGVkdWxlci9BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvc2NoZWR1bGVyL0FzeW5jU2NoZWR1bGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9vcGVyYXRvci90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9PdXRlclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9Jbm5lclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvQmVoYXZpb3JTdWJqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL1N1YmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvU3ViamVjdFN1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2F1Z2UvcmVuZGVyZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0cnVjdHVyZXMvcG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0cnVjdHVyZXMvdGV4dC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RydWN0dXJlcy90aWNrLnRzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9zdmctc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYW5pbWF0ZS11dGlsLnRzIiwid2VicGFjazovLy8uL3NyYy9nYXVnZS9lbGVtZW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2F1Z2Uvc3R5bGVzLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2F1Z2UvdGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiWUFDQSxjQU1BLElBQ0EsaUJBR0EsbUJBQ0EsQ0FDQSxJQUNBLEtBSUEsMkNBR0EsYUFHQSxP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QixVQUFtdUIsd3hCQ0FudUIsd0IiLCJmaWxlIjoiZ2F1Z2UubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTYpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDE3NzFhZjczN2Q5ZjVlNTc5NDIxIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKCcuL3V0aWwvaXNGdW5jdGlvbicpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZSgnLi9TdWJzY3JpcHRpb24nKTtcbnZhciBPYnNlcnZlcl8xID0gcmVxdWlyZSgnLi9PYnNlcnZlcicpO1xudmFyIHJ4U3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi9zeW1ib2wvcnhTdWJzY3JpYmVyJyk7XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIHtAbGluayBPYnNlcnZlcn0gaW50ZXJmYWNlIGFuZCBleHRlbmRzIHRoZVxuICoge0BsaW5rIFN1YnNjcmlwdGlvbn0gY2xhc3MuIFdoaWxlIHRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGlzIHRoZSBwdWJsaWMgQVBJIGZvclxuICogY29uc3VtaW5nIHRoZSB2YWx1ZXMgb2YgYW4ge0BsaW5rIE9ic2VydmFibGV9LCBhbGwgT2JzZXJ2ZXJzIGdldCBjb252ZXJ0ZWQgdG9cbiAqIGEgU3Vic2NyaWJlciwgaW4gb3JkZXIgdG8gcHJvdmlkZSBTdWJzY3JpcHRpb24tbGlrZSBjYXBhYmlsaXRpZXMgc3VjaCBhc1xuICogYHVuc3Vic2NyaWJlYC4gU3Vic2NyaWJlciBpcyBhIGNvbW1vbiB0eXBlIGluIFJ4SlMsIGFuZCBjcnVjaWFsIGZvclxuICogaW1wbGVtZW50aW5nIG9wZXJhdG9ycywgYnV0IGl0IGlzIHJhcmVseSB1c2VkIGFzIGEgcHVibGljIEFQSS5cbiAqXG4gKiBAY2xhc3MgU3Vic2NyaWJlcjxUPlxuICovXG52YXIgU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYnNlcnZlcnxmdW5jdGlvbih2YWx1ZTogVCk6IHZvaWR9IFtkZXN0aW5hdGlvbk9yTmV4dF0gQSBwYXJ0aWFsbHlcbiAgICAgKiBkZWZpbmVkIE9ic2VydmVyIG9yIGEgYG5leHRgIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZTogP2FueSk6IHZvaWR9IFtlcnJvcl0gVGhlIGBlcnJvcmAgY2FsbGJhY2sgb2YgYW5cbiAgICAgKiBPYnNlcnZlci5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IHZvaWR9IFtjb21wbGV0ZV0gVGhlIGBjb21wbGV0ZWAgY2FsbGJhY2sgb2YgYW5cbiAgICAgKiBPYnNlcnZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc3luY0Vycm9yVmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLnN5bmNFcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gT2JzZXJ2ZXJfMS5lbXB0eTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoIWRlc3RpbmF0aW9uT3JOZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBPYnNlcnZlcl8xLmVtcHR5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbk9yTmV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uT3JOZXh0IGluc3RhbmNlb2YgU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uT3JOZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5hZGQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKHRoaXMsIGRlc3RpbmF0aW9uT3JOZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKHRoaXMsIGRlc3RpbmF0aW9uT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlW3J4U3Vic2NyaWJlcl8xLnJ4U3Vic2NyaWJlcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgIC8qKlxuICAgICAqIEEgc3RhdGljIGZhY3RvcnkgZm9yIGEgU3Vic2NyaWJlciwgZ2l2ZW4gYSAocG90ZW50aWFsbHkgcGFydGlhbCkgZGVmaW5pdGlvblxuICAgICAqIG9mIGFuIE9ic2VydmVyLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oeDogP1QpOiB2b2lkfSBbbmV4dF0gVGhlIGBuZXh0YCBjYWxsYmFjayBvZiBhbiBPYnNlcnZlci5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGU6ID9hbnkpOiB2b2lkfSBbZXJyb3JdIFRoZSBgZXJyb3JgIGNhbGxiYWNrIG9mIGFuXG4gICAgICogT2JzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBbY29tcGxldGVdIFRoZSBgY29tcGxldGVgIGNhbGxiYWNrIG9mIGFuXG4gICAgICogT2JzZXJ2ZXIuXG4gICAgICogQHJldHVybiB7U3Vic2NyaWJlcjxUPn0gQSBTdWJzY3JpYmVyIHdyYXBwaW5nIHRoZSAocGFydGlhbGx5IGRlZmluZWQpXG4gICAgICogT2JzZXJ2ZXIgcmVwcmVzZW50ZWQgYnkgdGhlIGdpdmVuIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBuZXcgU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBzdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGNhbGxiYWNrIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBvZiB0eXBlIGBuZXh0YCBmcm9tXG4gICAgICogdGhlIE9ic2VydmFibGUsIHdpdGggYSB2YWx1ZS4gVGhlIE9ic2VydmFibGUgbWF5IGNhbGwgdGhpcyBtZXRob2QgMCBvciBtb3JlXG4gICAgICogdGltZXMuXG4gICAgICogQHBhcmFtIHtUfSBbdmFsdWVdIFRoZSBgbmV4dGAgdmFsdWUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUge0BsaW5rIE9ic2VydmVyfSBjYWxsYmFjayB0byByZWNlaXZlIG5vdGlmaWNhdGlvbnMgb2YgdHlwZSBgZXJyb3JgIGZyb21cbiAgICAgKiB0aGUgT2JzZXJ2YWJsZSwgd2l0aCBhbiBhdHRhY2hlZCB7QGxpbmsgRXJyb3J9LiBOb3RpZmllcyB0aGUgT2JzZXJ2ZXIgdGhhdFxuICAgICAqIHRoZSBPYnNlcnZhYmxlIGhhcyBleHBlcmllbmNlZCBhbiBlcnJvciBjb25kaXRpb24uXG4gICAgICogQHBhcmFtIHthbnl9IFtlcnJdIFRoZSBgZXJyb3JgIGV4Y2VwdGlvbi5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUge0BsaW5rIE9ic2VydmVyfSBjYWxsYmFjayB0byByZWNlaXZlIGEgdmFsdWVsZXNzIG5vdGlmaWNhdGlvbiBvZiB0eXBlXG4gICAgICogYGNvbXBsZXRlYCBmcm9tIHRoZSBPYnNlcnZhYmxlLiBOb3RpZmllcyB0aGUgT2JzZXJ2ZXIgdGhhdCB0aGUgT2JzZXJ2YWJsZVxuICAgICAqIGhhcyBmaW5pc2hlZCBzZW5kaW5nIHB1c2gtYmFzZWQgbm90aWZpY2F0aW9ucy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfcGFyZW50ID0gX2EuX3BhcmVudCwgX3BhcmVudHMgPSBfYS5fcGFyZW50cztcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGFyZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gX3BhcmVudDtcbiAgICAgICAgdGhpcy5fcGFyZW50cyA9IF9wYXJlbnRzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24pKTtcbmV4cG9ydHMuU3Vic2NyaWJlciA9IFN1YnNjcmliZXI7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFNhZmVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2FmZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FmZVN1YnNjcmliZXIoX3BhcmVudFN1YnNjcmliZXIsIG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3BhcmVudFN1YnNjcmliZXIgPSBfcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgdmFyIG5leHQ7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKG9ic2VydmVyT3JOZXh0KSkge1xuICAgICAgICAgICAgbmV4dCA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9ic2VydmVyT3JOZXh0KSB7XG4gICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQubmV4dDtcbiAgICAgICAgICAgIGVycm9yID0gb2JzZXJ2ZXJPck5leHQuZXJyb3I7XG4gICAgICAgICAgICBjb21wbGV0ZSA9IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlO1xuICAgICAgICAgICAgaWYgKG9ic2VydmVyT3JOZXh0ICE9PSBPYnNlcnZlcl8xLmVtcHR5KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dCA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihjb250ZXh0LnVuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZChjb250ZXh0LnVuc3Vic2NyaWJlLmJpbmQoY29udGV4dCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZXh0LnVuc3Vic2NyaWJlID0gdGhpcy51bnN1YnNjcmliZS5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLl9uZXh0ID0gbmV4dDtcbiAgICAgICAgdGhpcy5fZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5fY29tcGxldGUgPSBjb21wbGV0ZTtcbiAgICB9XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCAmJiB0aGlzLl9uZXh0KSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICAgICAgaWYgKCFfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9uZXh0LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgdGhpcy5fbmV4dCwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9lcnJvciwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHRoaXMuX2Vycm9yLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgICAgICBfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZWRDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9jb21wbGV0ZS5jYWxsKF90aGlzLl9jb250ZXh0KTsgfTtcbiAgICAgICAgICAgICAgICBpZiAoIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih3cmFwcGVkQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgd3JhcHBlZENvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl9fdHJ5T3JVbnN1YiA9IGZ1bmN0aW9uIChmbiwgdmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl9fdHJ5T3JTZXRFcnJvciA9IGZ1bmN0aW9uIChwYXJlbnQsIGZuLCB2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLl9jb250ZXh0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGFyZW50U3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcnhqcy9TdWJzY3JpYmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCBjb25zdCBTVkdfSEVJR0hUID0gMzIwO1xuZXhwb3J0IGNvbnN0IFNWR19XSURUSCA9IDQ4MDtcblxuZXhwb3J0IGNvbnN0IERSQVdfQUNDVVJBQ1kgPSBNYXRoLlBJIC8gMTgwO1xuZXhwb3J0IGNvbnN0IFNDQUxFX1NUQVJUX0FOR0xFID0gLSBNYXRoLlBJIC8gNjtcbmV4cG9ydCBjb25zdCBTQ0FMRV9FTkRfQU5HTEUgPSA3ICogTWF0aC5QSSAvIDY7XG5leHBvcnQgY29uc3QgU0NBTEVfUkFUSU8gPSBbIDgsIDI2LCAxMDAgXTtcbmV4cG9ydCBjb25zdCBTQ0FMRV9QQVRIX0NPVU5UID0gMztcbmV4cG9ydCBjb25zdCBTQ0FMRV9DRU5URVJfWCA9IFNWR19XSURUSCAvIDI7XG5leHBvcnQgY29uc3QgU0NBTEVfQ0VOVEVSX1kgPSBTVkdfSEVJR0hUIC8gMiAtIDQ1O1xuZXhwb3J0IGNvbnN0IFNDQUxFX1JBRElVUyA9IDE3MDtcblxuZXhwb3J0IGNvbnN0IFRJQ0tTX0NPVU5UID0gNztcbmV4cG9ydCBjb25zdCBUSUNLU19JTkRFTlQgPSA4O1xuZXhwb3J0IGNvbnN0IFRJQ0tTX0xFTkdUSCA9IDM7XG5leHBvcnQgY29uc3QgVElDS1NfVEVYVF9JTkRFTlQgPSAzO1xuZXhwb3J0IGNvbnN0IFRJQ0tTX1BPU0lUSU9OX0lOREVOVCA9IDMuNTtcblxuZXhwb3J0IGNvbnN0IEhBTkRfUkFESVVTID0gMTA7XG5cbmV4cG9ydCBjb25zdCBBTklNQVRJT05fRFVSQVRJT04gPSAxNTAwO1xuZXhwb3J0IGNvbnN0IEFOSU1BVElPTl9SQVRJTyA9IFs3MCwgMzBdO1xuXG5leHBvcnQgY29uc3QgREFNUElOR19FUV9BID0gMTtcbmV4cG9ydCBjb25zdCBEQU1QSU5HX0VRX0IgPSAxO1xuZXhwb3J0IGNvbnN0IERBTVBJTkdfRVFfQyA9IDEwO1xuXG5leHBvcnQgY29uc3QgU1ZHX05BTUVTUEFDRSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlciEuL3NyYy9jb25zdGFudHMudHMiLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvbW1vbkpTIC8gTm9kZSBoYXZlIGdsb2JhbCBjb250ZXh0IGV4cG9zZWQgYXMgXCJnbG9iYWxcIiB2YXJpYWJsZS5cbi8vIFdlIGRvbid0IHdhbnQgdG8gaW5jbHVkZSB0aGUgd2hvbGUgbm9kZS5kLnRzIHRoaXMgdGhpcyBjb21waWxhdGlvbiB1bml0IHNvIHdlJ2xsIGp1c3QgZmFrZVxuLy8gdGhlIGdsb2JhbCBcImdsb2JhbFwiIHZhciBmb3Igbm93LlxudmFyIF9fd2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93O1xudmFyIF9fc2VsZiA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmIHNlbGY7XG52YXIgX19nbG9iYWwgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWw7XG52YXIgX3Jvb3QgPSBfX3dpbmRvdyB8fCBfX2dsb2JhbCB8fCBfX3NlbGY7XG5leHBvcnRzLnJvb3QgPSBfcm9vdDtcbi8vIFdvcmthcm91bmQgQ2xvc3VyZSBDb21waWxlciByZXN0cmljdGlvbjogVGhlIGJvZHkgb2YgYSBnb29nLm1vZHVsZSBjYW5ub3QgdXNlIHRocm93LlxuLy8gVGhpcyBpcyBuZWVkZWQgd2hlbiB1c2VkIHdpdGggYW5ndWxhci90c2lja2xlIHdoaWNoIGluc2VydHMgYSBnb29nLm1vZHVsZSBzdGF0ZW1lbnQuXG4vLyBXcmFwIGluIElJRkVcbihmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfcm9vdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1J4SlMgY291bGQgbm90IGZpbmQgYW55IGdsb2JhbCBjb250ZXh0ICh3aW5kb3csIHNlbGYsIGdsb2JhbCknKTtcbiAgICB9XG59KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm9vdC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvcm9vdC5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciByb290XzEgPSByZXF1aXJlKCcuL3V0aWwvcm9vdCcpO1xudmFyIHRvU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi91dGlsL3RvU3Vic2NyaWJlcicpO1xudmFyIG9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vc3ltYm9sL29ic2VydmFibGUnKTtcbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhbnkgc2V0IG9mIHZhbHVlcyBvdmVyIGFueSBhbW91bnQgb2YgdGltZS4gVGhpcyBpcyB0aGUgbW9zdCBiYXNpYyBidWlsZGluZyBibG9ja1xuICogb2YgUnhKUy5cbiAqXG4gKiBAY2xhc3MgT2JzZXJ2YWJsZTxUPlxuICovXG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3Vic2NyaWJlIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBPYnNlcnZhYmxlIGlzXG4gICAgICogaW5pdGlhbGx5IHN1YnNjcmliZWQgdG8uIFRoaXMgZnVuY3Rpb24gaXMgZ2l2ZW4gYSBTdWJzY3JpYmVyLCB0byB3aGljaCBuZXcgdmFsdWVzXG4gICAgICogY2FuIGJlIGBuZXh0YGVkLCBvciBhbiBgZXJyb3JgIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJhaXNlIGFuIGVycm9yLCBvclxuICAgICAqIGBjb21wbGV0ZWAgY2FuIGJlIGNhbGxlZCB0byBub3RpZnkgb2YgYSBzdWNjZXNzZnVsIGNvbXBsZXRpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgdGhpcy5faXNTY2FsYXIgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgT2JzZXJ2YWJsZSwgd2l0aCB0aGlzIE9ic2VydmFibGUgYXMgdGhlIHNvdXJjZSwgYW5kIHRoZSBwYXNzZWRcbiAgICAgKiBvcGVyYXRvciBkZWZpbmVkIGFzIHRoZSBuZXcgb2JzZXJ2YWJsZSdzIG9wZXJhdG9yLlxuICAgICAqIEBtZXRob2QgbGlmdFxuICAgICAqIEBwYXJhbSB7T3BlcmF0b3J9IG9wZXJhdG9yIHRoZSBvcGVyYXRvciBkZWZpbmluZyB0aGUgb3BlcmF0aW9uIHRvIHRha2Ugb24gdGhlIG9ic2VydmFibGVcbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBhIG5ldyBvYnNlcnZhYmxlIHdpdGggdGhlIE9wZXJhdG9yIGFwcGxpZWRcbiAgICAgKi9cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW52b2tlcyBhbiBleGVjdXRpb24gb2YgYW4gT2JzZXJ2YWJsZSBhbmQgcmVnaXN0ZXJzIE9ic2VydmVyIGhhbmRsZXJzIGZvciBub3RpZmljYXRpb25zIGl0IHdpbGwgZW1pdC5cbiAgICAgKlxuICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Vc2UgaXQgd2hlbiB5b3UgaGF2ZSBhbGwgdGhlc2UgT2JzZXJ2YWJsZXMsIGJ1dCBzdGlsbCBub3RoaW5nIGlzIGhhcHBlbmluZy48L3NwYW4+XG4gICAgICpcbiAgICAgKiBgc3Vic2NyaWJlYCBpcyBub3QgYSByZWd1bGFyIG9wZXJhdG9yLCBidXQgYSBtZXRob2QgdGhhdCBjYWxscyBPYnNlcnZhYmxlJ3MgaW50ZXJuYWwgYHN1YnNjcmliZWAgZnVuY3Rpb24uIEl0XG4gICAgICogbWlnaHQgYmUgZm9yIGV4YW1wbGUgYSBmdW5jdGlvbiB0aGF0IHlvdSBwYXNzZWQgdG8gYSB7QGxpbmsgY3JlYXRlfSBzdGF0aWMgZmFjdG9yeSwgYnV0IG1vc3Qgb2YgdGhlIHRpbWUgaXQgaXNcbiAgICAgKiBhIGxpYnJhcnkgaW1wbGVtZW50YXRpb24sIHdoaWNoIGRlZmluZXMgd2hhdCBhbmQgd2hlbiB3aWxsIGJlIGVtaXR0ZWQgYnkgYW4gT2JzZXJ2YWJsZS4gVGhpcyBtZWFucyB0aGF0IGNhbGxpbmdcbiAgICAgKiBgc3Vic2NyaWJlYCBpcyBhY3R1YWxseSB0aGUgbW9tZW50IHdoZW4gT2JzZXJ2YWJsZSBzdGFydHMgaXRzIHdvcmssIG5vdCB3aGVuIGl0IGlzIGNyZWF0ZWQsIGFzIGl0IGlzIG9mdGVuXG4gICAgICogdGhvdWdodC5cbiAgICAgKlxuICAgICAqIEFwYXJ0IGZyb20gc3RhcnRpbmcgdGhlIGV4ZWN1dGlvbiBvZiBhbiBPYnNlcnZhYmxlLCB0aGlzIG1ldGhvZCBhbGxvd3MgeW91IHRvIGxpc3RlbiBmb3IgdmFsdWVzXG4gICAgICogdGhhdCBhbiBPYnNlcnZhYmxlIGVtaXRzLCBhcyB3ZWxsIGFzIGZvciB3aGVuIGl0IGNvbXBsZXRlcyBvciBlcnJvcnMuIFlvdSBjYW4gYWNoaWV2ZSB0aGlzIGluIHR3b1xuICAgICAqIGZvbGxvd2luZyB3YXlzLlxuICAgICAqXG4gICAgICogVGhlIGZpcnN0IHdheSBpcyBjcmVhdGluZyBhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIHtAbGluayBPYnNlcnZlcn0gaW50ZXJmYWNlLiBJdCBzaG91bGQgaGF2ZSBtZXRob2RzXG4gICAgICogZGVmaW5lZCBieSB0aGF0IGludGVyZmFjZSwgYnV0IG5vdGUgdGhhdCBpdCBzaG91bGQgYmUganVzdCBhIHJlZ3VsYXIgSmF2YVNjcmlwdCBvYmplY3QsIHdoaWNoIHlvdSBjYW4gY3JlYXRlXG4gICAgICogeW91cnNlbGYgaW4gYW55IHdheSB5b3Ugd2FudCAoRVM2IGNsYXNzLCBjbGFzc2ljIGZ1bmN0aW9uIGNvbnN0cnVjdG9yLCBvYmplY3QgbGl0ZXJhbCBldGMuKS4gSW4gcGFydGljdWxhciBkb1xuICAgICAqIG5vdCBhdHRlbXB0IHRvIHVzZSBhbnkgUnhKUyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIHRvIGNyZWF0ZSBPYnNlcnZlcnMgLSB5b3UgZG9uJ3QgbmVlZCB0aGVtLiBSZW1lbWJlciBhbHNvXG4gICAgICogdGhhdCB5b3VyIG9iamVjdCBkb2VzIG5vdCBoYXZlIHRvIGltcGxlbWVudCBhbGwgbWV0aG9kcy4gSWYgeW91IGZpbmQgeW91cnNlbGYgY3JlYXRpbmcgYSBtZXRob2QgdGhhdCBkb2Vzbid0XG4gICAgICogZG8gYW55dGhpbmcsIHlvdSBjYW4gc2ltcGx5IG9taXQgaXQuIE5vdGUgaG93ZXZlciwgdGhhdCBpZiBgZXJyb3JgIG1ldGhvZCBpcyBub3QgcHJvdmlkZWQsIGFsbCBlcnJvcnMgd2lsbFxuICAgICAqIGJlIGxlZnQgdW5jYXVnaHQuXG4gICAgICpcbiAgICAgKiBUaGUgc2Vjb25kIHdheSBpcyB0byBnaXZlIHVwIG9uIE9ic2VydmVyIG9iamVjdCBhbHRvZ2V0aGVyIGFuZCBzaW1wbHkgcHJvdmlkZSBjYWxsYmFjayBmdW5jdGlvbnMgaW4gcGxhY2Ugb2YgaXRzIG1ldGhvZHMuXG4gICAgICogVGhpcyBtZWFucyB5b3UgY2FuIHByb3ZpZGUgdGhyZWUgZnVuY3Rpb25zIGFzIGFyZ3VtZW50cyB0byBgc3Vic2NyaWJlYCwgd2hlcmUgZmlyc3QgZnVuY3Rpb24gaXMgZXF1aXZhbGVudFxuICAgICAqIG9mIGEgYG5leHRgIG1ldGhvZCwgc2Vjb25kIG9mIGFuIGBlcnJvcmAgbWV0aG9kIGFuZCB0aGlyZCBvZiBhIGBjb21wbGV0ZWAgbWV0aG9kLiBKdXN0IGFzIGluIGNhc2Ugb2YgT2JzZXJ2ZXIsXG4gICAgICogaWYgeW91IGRvIG5vdCBuZWVkIHRvIGxpc3RlbiBmb3Igc29tZXRoaW5nLCB5b3UgY2FuIG9taXQgYSBmdW5jdGlvbiwgcHJlZmVyYWJseSBieSBwYXNzaW5nIGB1bmRlZmluZWRgIG9yIGBudWxsYCxcbiAgICAgKiBzaW5jZSBgc3Vic2NyaWJlYCByZWNvZ25pemVzIHRoZXNlIGZ1bmN0aW9ucyBieSB3aGVyZSB0aGV5IHdlcmUgcGxhY2VkIGluIGZ1bmN0aW9uIGNhbGwuIFdoZW4gaXQgY29tZXNcbiAgICAgKiB0byBgZXJyb3JgIGZ1bmN0aW9uLCBqdXN0IGFzIGJlZm9yZSwgaWYgbm90IHByb3ZpZGVkLCBlcnJvcnMgZW1pdHRlZCBieSBhbiBPYnNlcnZhYmxlIHdpbGwgYmUgdGhyb3duLlxuICAgICAqXG4gICAgICogV2hhdGV2ZXIgc3R5bGUgb2YgY2FsbGluZyBgc3Vic2NyaWJlYCB5b3UgdXNlLCBpbiBib3RoIGNhc2VzIGl0IHJldHVybnMgYSBTdWJzY3JpcHRpb24gb2JqZWN0LlxuICAgICAqIFRoaXMgb2JqZWN0IGFsbG93cyB5b3UgdG8gY2FsbCBgdW5zdWJzY3JpYmVgIG9uIGl0LCB3aGljaCBpbiB0dXJuIHdpbGwgc3RvcCB3b3JrIHRoYXQgYW4gT2JzZXJ2YWJsZSBkb2VzIGFuZCB3aWxsIGNsZWFuXG4gICAgICogdXAgYWxsIHJlc291cmNlcyB0aGF0IGFuIE9ic2VydmFibGUgdXNlZC4gTm90ZSB0aGF0IGNhbmNlbGxpbmcgYSBzdWJzY3JpcHRpb24gd2lsbCBub3QgY2FsbCBgY29tcGxldGVgIGNhbGxiYWNrXG4gICAgICogcHJvdmlkZWQgdG8gYHN1YnNjcmliZWAgZnVuY3Rpb24sIHdoaWNoIGlzIHJlc2VydmVkIGZvciBhIHJlZ3VsYXIgY29tcGxldGlvbiBzaWduYWwgdGhhdCBjb21lcyBmcm9tIGFuIE9ic2VydmFibGUuXG4gICAgICpcbiAgICAgKiBSZW1lbWJlciB0aGF0IGNhbGxiYWNrcyBwcm92aWRlZCB0byBgc3Vic2NyaWJlYCBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5LlxuICAgICAqIEl0IGlzIGFuIE9ic2VydmFibGUgaXRzZWxmIHRoYXQgZGVjaWRlcyB3aGVuIHRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZC4gRm9yIGV4YW1wbGUge0BsaW5rIG9mfVxuICAgICAqIGJ5IGRlZmF1bHQgZW1pdHMgYWxsIGl0cyB2YWx1ZXMgc3luY2hyb25vdXNseS4gQWx3YXlzIGNoZWNrIGRvY3VtZW50YXRpb24gZm9yIGhvdyBnaXZlbiBPYnNlcnZhYmxlXG4gICAgICogd2lsbCBiZWhhdmUgd2hlbiBzdWJzY3JpYmVkIGFuZCBpZiBpdHMgZGVmYXVsdCBiZWhhdmlvciBjYW4gYmUgbW9kaWZpZWQgd2l0aCBhIHtAbGluayBTY2hlZHVsZXJ9LlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+U3Vic2NyaWJlIHdpdGggYW4gT2JzZXJ2ZXI8L2NhcHRpb24+XG4gICAgICogY29uc3Qgc3VtT2JzZXJ2ZXIgPSB7XG4gICAgICogICBzdW06IDAsXG4gICAgICogICBuZXh0KHZhbHVlKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdBZGRpbmc6ICcgKyB2YWx1ZSk7XG4gICAgICogICAgIHRoaXMuc3VtID0gdGhpcy5zdW0gKyB2YWx1ZTtcbiAgICAgKiAgIH0sXG4gICAgICogICBlcnJvcigpIHsgLy8gV2UgYWN0dWFsbHkgY291bGQganVzdCByZW1vdmUgdGhpcyBtZXRob2QsXG4gICAgICogICB9LCAgICAgICAgLy8gc2luY2Ugd2UgZG8gbm90IHJlYWxseSBjYXJlIGFib3V0IGVycm9ycyByaWdodCBub3cuXG4gICAgICogICBjb21wbGV0ZSgpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ1N1bSBlcXVhbHM6ICcgKyB0aGlzLnN1bSk7XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIFJ4Lk9ic2VydmFibGUub2YoMSwgMiwgMykgLy8gU3luY2hyb25vdXNseSBlbWl0cyAxLCAyLCAzIGFuZCB0aGVuIGNvbXBsZXRlcy5cbiAgICAgKiAuc3Vic2NyaWJlKHN1bU9ic2VydmVyKTtcbiAgICAgKlxuICAgICAqIC8vIExvZ3M6XG4gICAgICogLy8gXCJBZGRpbmc6IDFcIlxuICAgICAqIC8vIFwiQWRkaW5nOiAyXCJcbiAgICAgKiAvLyBcIkFkZGluZzogM1wiXG4gICAgICogLy8gXCJTdW0gZXF1YWxzOiA2XCJcbiAgICAgKlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+U3Vic2NyaWJlIHdpdGggZnVuY3Rpb25zPC9jYXB0aW9uPlxuICAgICAqIGxldCBzdW0gPSAwO1xuICAgICAqXG4gICAgICogUnguT2JzZXJ2YWJsZS5vZigxLCAyLCAzKVxuICAgICAqIC5zdWJzY3JpYmUoXG4gICAgICogICBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnQWRkaW5nOiAnICsgdmFsdWUpO1xuICAgICAqICAgICBzdW0gPSBzdW0gKyB2YWx1ZTtcbiAgICAgKiAgIH0sXG4gICAgICogICB1bmRlZmluZWQsXG4gICAgICogICBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ1N1bSBlcXVhbHM6ICcgKyBzdW0pO1xuICAgICAqICAgfVxuICAgICAqICk7XG4gICAgICpcbiAgICAgKiAvLyBMb2dzOlxuICAgICAqIC8vIFwiQWRkaW5nOiAxXCJcbiAgICAgKiAvLyBcIkFkZGluZzogMlwiXG4gICAgICogLy8gXCJBZGRpbmc6IDNcIlxuICAgICAqIC8vIFwiU3VtIGVxdWFsczogNlwiXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkNhbmNlbCBhIHN1YnNjcmlwdGlvbjwvY2FwdGlvbj5cbiAgICAgKiBjb25zdCBzdWJzY3JpcHRpb24gPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnN1YnNjcmliZShcbiAgICAgKiAgIG51bSA9PiBjb25zb2xlLmxvZyhudW0pLFxuICAgICAqICAgdW5kZWZpbmVkLFxuICAgICAqICAgKCkgPT4gY29uc29sZS5sb2coJ2NvbXBsZXRlZCEnKSAvLyBXaWxsIG5vdCBiZSBjYWxsZWQsIGV2ZW5cbiAgICAgKiApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBjYW5jZWxsaW5nIHN1YnNjcmlwdGlvblxuICAgICAqXG4gICAgICpcbiAgICAgKiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgKiAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAqICAgY29uc29sZS5sb2coJ3Vuc3Vic2NyaWJlZCEnKTtcbiAgICAgKiB9LCAyNTAwKTtcbiAgICAgKlxuICAgICAqIC8vIExvZ3M6XG4gICAgICogLy8gMCBhZnRlciAxc1xuICAgICAqIC8vIDEgYWZ0ZXIgMnNcbiAgICAgKiAvLyBcInVuc3Vic2NyaWJlZCFcIiBhZnRlciAyLjVzXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JzZXJ2ZXJ8RnVuY3Rpb259IG9ic2VydmVyT3JOZXh0IChvcHRpb25hbCkgRWl0aGVyIGFuIG9ic2VydmVyIHdpdGggbWV0aG9kcyB0byBiZSBjYWxsZWQsXG4gICAgICogIG9yIHRoZSBmaXJzdCBvZiB0aHJlZSBwb3NzaWJsZSBoYW5kbGVycywgd2hpY2ggaXMgdGhlIGhhbmRsZXIgZm9yIGVhY2ggdmFsdWUgZW1pdHRlZCBmcm9tIHRoZSBzdWJzY3JpYmVkXG4gICAgICogIE9ic2VydmFibGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXJyb3IgKG9wdGlvbmFsKSBBIGhhbmRsZXIgZm9yIGEgdGVybWluYWwgZXZlbnQgcmVzdWx0aW5nIGZyb20gYW4gZXJyb3IuIElmIG5vIGVycm9yIGhhbmRsZXIgaXMgcHJvdmlkZWQsXG4gICAgICogIHRoZSBlcnJvciB3aWxsIGJlIHRocm93biBhcyB1bmhhbmRsZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGxldGUgKG9wdGlvbmFsKSBBIGhhbmRsZXIgZm9yIGEgdGVybWluYWwgZXZlbnQgcmVzdWx0aW5nIGZyb20gc3VjY2Vzc2Z1bCBjb21wbGV0aW9uLlxuICAgICAqIEByZXR1cm4ge0lTdWJzY3JpcHRpb259IGEgc3Vic2NyaXB0aW9uIHJlZmVyZW5jZSB0byB0aGUgcmVnaXN0ZXJlZCBoYW5kbGVyc1xuICAgICAqIEBtZXRob2Qgc3Vic2NyaWJlXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIG9wZXJhdG9yID0gdGhpcy5vcGVyYXRvcjtcbiAgICAgICAgdmFyIHNpbmsgPSB0b1N1YnNjcmliZXJfMS50b1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGlmIChvcGVyYXRvcikge1xuICAgICAgICAgICAgb3BlcmF0b3IuY2FsbChzaW5rLCB0aGlzLnNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzaW5rLmFkZCh0aGlzLnNvdXJjZSA/IHRoaXMuX3N1YnNjcmliZShzaW5rKSA6IHRoaXMuX3RyeVN1YnNjcmliZShzaW5rKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNpbmsuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHNpbmsuc3luY0Vycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgc2luay5zeW5jRXJyb3JWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2luaztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICBzaW5rLnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGZvckVhY2hcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0IGEgaGFuZGxlciBmb3IgZWFjaCB2YWx1ZSBlbWl0dGVkIGJ5IHRoZSBvYnNlcnZhYmxlXG4gICAgICogQHBhcmFtIHtQcm9taXNlQ29uc3RydWN0b3J9IFtQcm9taXNlQ3Rvcl0gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB1c2VkIHRvIGluc3RhbnRpYXRlIHRoZSBQcm9taXNlXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgZWl0aGVyIHJlc29sdmVzIG9uIG9ic2VydmFibGUgY29tcGxldGlvbiBvclxuICAgICAqICByZWplY3RzIHdpdGggdGhlIGhhbmRsZWQgZXJyb3JcbiAgICAgKi9cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIFByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghUHJvbWlzZUN0b3IpIHtcbiAgICAgICAgICAgIGlmIChyb290XzEucm9vdC5SeCAmJiByb290XzEucm9vdC5SeC5jb25maWcgJiYgcm9vdF8xLnJvb3QuUnguY29uZmlnLlByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBQcm9taXNlQ3RvciA9IHJvb3RfMS5yb290LlJ4LmNvbmZpZy5Qcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocm9vdF8xLnJvb3QuUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIFByb21pc2VDdG9yID0gcm9vdF8xLnJvb3QuUHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIVByb21pc2VDdG9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIFByb21pc2UgaW1wbCBmb3VuZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgLy8gTXVzdCBiZSBkZWNsYXJlZCBpbiBhIHNlcGFyYXRlIHN0YXRlbWVudCB0byBhdm9pZCBhIFJlZmVybmNlRXJyb3Igd2hlblxuICAgICAgICAgICAgLy8gYWNjZXNzaW5nIHN1YnNjcmlwdGlvbiBiZWxvdyBpbiB0aGUgY2xvc3VyZSBkdWUgdG8gVGVtcG9yYWwgRGVhZCBab25lLlxuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGEgc3Vic2NyaXB0aW9uLCB0aGVuIHdlIGNhbiBzdXJtaXNlXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBuZXh0IGhhbmRsaW5nIGlzIGFzeW5jaHJvbm91cy4gQW55IGVycm9ycyB0aHJvd25cbiAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCB0byBiZSByZWplY3RlZCBleHBsaWNpdGx5IGFuZCB1bnN1YnNjcmliZSBtdXN0IGJlXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbGxlZCBtYW51YWxseVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgTk8gc3Vic2NyaXB0aW9uLCB0aGVuIHdlJ3JlIGdldHRpbmcgYSBuZXh0ZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWUgc3luY2hyb25vdXNseSBkdXJpbmcgc3Vic2NyaXB0aW9uLiBXZSBjYW4ganVzdCBjYWxsIGl0LlxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCBlcnJvcnMsIE9ic2VydmFibGUncyBgc3Vic2NyaWJlYCB3aWxsIGVuc3VyZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gdW5zdWJzY3JpcHRpb24gbG9naWMgaXMgY2FsbGVkLCB0aGVuIHN5bmNocm9ub3VzbHkgcmV0aHJvdyB0aGUgZXJyb3IuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFmdGVyIHRoYXQsIFByb21pc2Ugd2lsbCB0cmFwIHRoZSBlcnJvciBhbmQgc2VuZCBpdFxuICAgICAgICAgICAgICAgICAgICAvLyBkb3duIHRoZSByZWplY3Rpb24gcGF0aC5cbiAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVqZWN0LCByZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFuIGludGVyb3AgcG9pbnQgZGVmaW5lZCBieSB0aGUgZXM3LW9ic2VydmFibGUgc3BlYyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG4gICAgICogQG1ldGhvZCBTeW1ib2wub2JzZXJ2YWJsZVxuICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9IHRoaXMgaW5zdGFuY2Ugb2YgdGhlIG9ic2VydmFibGVcbiAgICAgKi9cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtvYnNlcnZhYmxlXzEub2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLy8gSEFDSzogU2luY2UgVHlwZVNjcmlwdCBpbmhlcml0cyBzdGF0aWMgcHJvcGVydGllcyB0b28sIHdlIGhhdmUgdG9cbiAgICAvLyBmaWdodCBhZ2FpbnN0IFR5cGVTY3JpcHQgaGVyZSBzbyBTdWJqZWN0IGNhbiBoYXZlIGEgZGlmZmVyZW50IHN0YXRpYyBjcmVhdGUgc2lnbmF0dXJlXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjb2xkIE9ic2VydmFibGUgYnkgY2FsbGluZyB0aGUgT2JzZXJ2YWJsZSBjb25zdHJ1Y3RvclxuICAgICAqIEBzdGF0aWMgdHJ1ZVxuICAgICAqIEBvd25lciBPYnNlcnZhYmxlXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdWJzY3JpYmU/IHRoZSBzdWJzY3JpYmVyIGZ1bmN0aW9uIHRvIGJlIHBhc3NlZCB0byB0aGUgT2JzZXJ2YWJsZSBjb25zdHJ1Y3RvclxuICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9IGEgbmV3IGNvbGQgb2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvT2JzZXJ2YWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBpc0FycmF5XzEgPSByZXF1aXJlKCcuL3V0aWwvaXNBcnJheScpO1xudmFyIGlzT2JqZWN0XzEgPSByZXF1aXJlKCcuL3V0aWwvaXNPYmplY3QnKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKCcuL3V0aWwvaXNGdW5jdGlvbicpO1xudmFyIHRyeUNhdGNoXzEgPSByZXF1aXJlKCcuL3V0aWwvdHJ5Q2F0Y2gnKTtcbnZhciBlcnJvck9iamVjdF8xID0gcmVxdWlyZSgnLi91dGlsL2Vycm9yT2JqZWN0Jyk7XG52YXIgVW5zdWJzY3JpcHRpb25FcnJvcl8xID0gcmVxdWlyZSgnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIGRpc3Bvc2FibGUgcmVzb3VyY2UsIHN1Y2ggYXMgdGhlIGV4ZWN1dGlvbiBvZiBhbiBPYnNlcnZhYmxlLiBBXG4gKiBTdWJzY3JpcHRpb24gaGFzIG9uZSBpbXBvcnRhbnQgbWV0aG9kLCBgdW5zdWJzY3JpYmVgLCB0aGF0IHRha2VzIG5vIGFyZ3VtZW50XG4gKiBhbmQganVzdCBkaXNwb3NlcyB0aGUgcmVzb3VyY2UgaGVsZCBieSB0aGUgc3Vic2NyaXB0aW9uLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgc3Vic2NyaXB0aW9ucyBtYXkgYmUgZ3JvdXBlZCB0b2dldGhlciB0aHJvdWdoIHRoZSBgYWRkKClgXG4gKiBtZXRob2QsIHdoaWNoIHdpbGwgYXR0YWNoIGEgY2hpbGQgU3Vic2NyaXB0aW9uIHRvIHRoZSBjdXJyZW50IFN1YnNjcmlwdGlvbi5cbiAqIFdoZW4gYSBTdWJzY3JpcHRpb24gaXMgdW5zdWJzY3JpYmVkLCBhbGwgaXRzIGNoaWxkcmVuIChhbmQgaXRzIGdyYW5kY2hpbGRyZW4pXG4gKiB3aWxsIGJlIHVuc3Vic2NyaWJlZCBhcyB3ZWxsLlxuICpcbiAqIEBjbGFzcyBTdWJzY3JpcHRpb25cbiAqL1xudmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBbdW5zdWJzY3JpYmVdIEEgZnVuY3Rpb24gZGVzY3JpYmluZyBob3cgdG9cbiAgICAgKiBwZXJmb3JtIHRoZSBkaXNwb3NhbCBvZiByZXNvdXJjZXMgd2hlbiB0aGUgYHVuc3Vic2NyaWJlYCBtZXRob2QgaXMgY2FsbGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbih1bnN1YnNjcmliZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgdGhpcyBTdWJzY3JpcHRpb24gaGFzIGFscmVhZHkgYmVlbiB1bnN1YnNjcmliZWQuXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGFyZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICBpZiAodW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcG9zZXMgdGhlIHJlc291cmNlcyBoZWxkIGJ5IHRoZSBzdWJzY3JpcHRpb24uIE1heSwgZm9yIGluc3RhbmNlLCBjYW5jZWxcbiAgICAgKiBhbiBvbmdvaW5nIE9ic2VydmFibGUgZXhlY3V0aW9uIG9yIGNhbmNlbCBhbnkgb3RoZXIgdHlwZSBvZiB3b3JrIHRoYXRcbiAgICAgKiBzdGFydGVkIHdoZW4gdGhlIFN1YnNjcmlwdGlvbiB3YXMgY3JlYXRlZC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoYXNFcnJvcnMgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gdGhpcywgX3BhcmVudCA9IF9hLl9wYXJlbnQsIF9wYXJlbnRzID0gX2EuX3BhcmVudHMsIF91bnN1YnNjcmliZSA9IF9hLl91bnN1YnNjcmliZSwgX3N1YnNjcmlwdGlvbnMgPSBfYS5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wYXJlbnRzID0gbnVsbDtcbiAgICAgICAgLy8gbnVsbCBvdXQgX3N1YnNjcmlwdGlvbnMgZmlyc3Qgc28gYW55IGNoaWxkIHN1YnNjcmlwdGlvbnMgdGhhdCBhdHRlbXB0XG4gICAgICAgIC8vIHRvIHJlbW92ZSB0aGVtc2VsdmVzIGZyb20gdGhpcyBzdWJzY3JpcHRpb24gd2lsbCBub29wXG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIGxlbiA9IF9wYXJlbnRzID8gX3BhcmVudHMubGVuZ3RoIDogMDtcbiAgICAgICAgLy8gaWYgdGhpcy5fcGFyZW50IGlzIG51bGwsIHRoZW4gc28gaXMgdGhpcy5fcGFyZW50cywgYW5kIHdlXG4gICAgICAgIC8vIGRvbid0IGhhdmUgdG8gcmVtb3ZlIG91cnNlbHZlcyBmcm9tIGFueSBwYXJlbnQgc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgd2hpbGUgKF9wYXJlbnQpIHtcbiAgICAgICAgICAgIF9wYXJlbnQucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgLy8gaWYgdGhpcy5fcGFyZW50cyBpcyBudWxsIG9yIGluZGV4ID49IGxlbixcbiAgICAgICAgICAgIC8vIHRoZW4gX3BhcmVudCBpcyBzZXQgdG8gbnVsbCwgYW5kIHRoZSBsb29wIGV4aXRzXG4gICAgICAgICAgICBfcGFyZW50ID0gKytpbmRleCA8IGxlbiAmJiBfcGFyZW50c1tpbmRleF0gfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oX3Vuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgdmFyIHRyaWFsID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChfdW5zdWJzY3JpYmUpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBpZiAodHJpYWwgPT09IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBoYXNFcnJvcnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyB8fCAoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IgP1xuICAgICAgICAgICAgICAgICAgICBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lLmVycm9ycykgOiBbZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdC5lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlfMS5pc0FycmF5KF9zdWJzY3JpcHRpb25zKSkge1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGxlbiA9IF9zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IF9zdWJzY3JpcHRpb25zW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3RfMS5pc09iamVjdChzdWIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmlhbCA9IHRyeUNhdGNoXzEudHJ5Q2F0Y2goc3ViLnVuc3Vic2NyaWJlKS5jYWxsKHN1Yik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmlhbCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3JzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KGZsYXR0ZW5VbnN1YnNjcmlwdGlvbkVycm9ycyhlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNFcnJvcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yXzEuVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIGEgdGVhciBkb3duIHRvIGJlIGNhbGxlZCBkdXJpbmcgdGhlIHVuc3Vic2NyaWJlKCkgb2YgdGhpc1xuICAgICAqIFN1YnNjcmlwdGlvbi5cbiAgICAgKlxuICAgICAqIElmIHRoZSB0ZWFyIGRvd24gYmVpbmcgYWRkZWQgaXMgYSBzdWJzY3JpcHRpb24gdGhhdCBpcyBhbHJlYWR5XG4gICAgICogdW5zdWJzY3JpYmVkLCBpcyB0aGUgc2FtZSByZWZlcmVuY2UgYGFkZGAgaXMgYmVpbmcgY2FsbGVkIG9uLCBvciBpc1xuICAgICAqIGBTdWJzY3JpcHRpb24uRU1QVFlgLCBpdCB3aWxsIG5vdCBiZSBhZGRlZC5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgc3Vic2NyaXB0aW9uIGlzIGFscmVhZHkgaW4gYW4gYGNsb3NlZGAgc3RhdGUsIHRoZSBwYXNzZWRcbiAgICAgKiB0ZWFyIGRvd24gbG9naWMgd2lsbCBiZSBleGVjdXRlZCBpbW1lZGlhdGVseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VGVhcmRvd25Mb2dpY30gdGVhcmRvd24gVGhlIGFkZGl0aW9uYWwgbG9naWMgdG8gZXhlY3V0ZSBvblxuICAgICAqIHRlYXJkb3duLlxuICAgICAqIEByZXR1cm4ge1N1YnNjcmlwdGlvbn0gUmV0dXJucyB0aGUgU3Vic2NyaXB0aW9uIHVzZWQgb3IgY3JlYXRlZCB0byBiZVxuICAgICAqIGFkZGVkIHRvIHRoZSBpbm5lciBzdWJzY3JpcHRpb25zIGxpc3QuIFRoaXMgU3Vic2NyaXB0aW9uIGNhbiBiZSB1c2VkIHdpdGhcbiAgICAgKiBgcmVtb3ZlKClgIHRvIHJlbW92ZSB0aGUgcGFzc2VkIHRlYXJkb3duIGxvZ2ljIGZyb20gdGhlIGlubmVyIHN1YnNjcmlwdGlvbnNcbiAgICAgKiBsaXN0LlxuICAgICAqL1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIGlmICghdGVhcmRvd24gfHwgKHRlYXJkb3duID09PSBTdWJzY3JpcHRpb24uRU1QVFkpKSB7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZWFyZG93biA9PT0gdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRlYXJkb3duO1xuICAgICAgICBzd2l0Y2ggKHR5cGVvZiB0ZWFyZG93bikge1xuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGVhcmRvd24pO1xuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLmNsb3NlZCB8fCB0eXBlb2Ygc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc3Vic2NyaXB0aW9uLl9hZGRQYXJlbnQgIT09ICdmdW5jdGlvbicgLyogcXVhY2sgcXVhY2sgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uX3N1YnNjcmlwdGlvbnMgPSBbdG1wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIHRlYXJkb3duICcgKyB0ZWFyZG93biArICcgYWRkZWQgdG8gU3Vic2NyaXB0aW9uLicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5fc3Vic2NyaXB0aW9ucyB8fCAodGhpcy5fc3Vic2NyaXB0aW9ucyA9IFtdKTtcbiAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5fYWRkUGFyZW50KHRoaXMpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIFN1YnNjcmlwdGlvbiBmcm9tIHRoZSBpbnRlcm5hbCBsaXN0IG9mIHN1YnNjcmlwdGlvbnMgdGhhdCB3aWxsXG4gICAgICogdW5zdWJzY3JpYmUgZHVyaW5nIHRoZSB1bnN1YnNjcmliZSBwcm9jZXNzIG9mIHRoaXMgU3Vic2NyaXB0aW9uLlxuICAgICAqIEBwYXJhbSB7U3Vic2NyaXB0aW9ufSBzdWJzY3JpcHRpb24gVGhlIHN1YnNjcmlwdGlvbiB0byByZW1vdmUuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbkluZGV4ID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5zcGxpY2Uoc3Vic2NyaXB0aW9uSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9wYXJlbnQgPSBfYS5fcGFyZW50LCBfcGFyZW50cyA9IF9hLl9wYXJlbnRzO1xuICAgICAgICBpZiAoIV9wYXJlbnQgfHwgX3BhcmVudCA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgcGFyZW50LCBvciB0aGUgbmV3IHBhcmVudCBpcyB0aGUgc2FtZSBhcyB0aGVcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgcGFyZW50LCB0aGVuIHNldCB0aGlzLl9wYXJlbnQgdG8gdGhlIG5ldyBwYXJlbnQuXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIV9wYXJlbnRzKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGFscmVhZHkgb25lIHBhcmVudCwgYnV0IG5vdCBtdWx0aXBsZSwgYWxsb2NhdGUgYW4gQXJyYXkgdG9cbiAgICAgICAgICAgIC8vIHN0b3JlIHRoZSByZXN0IG9mIHRoZSBwYXJlbnQgU3Vic2NyaXB0aW9ucy5cbiAgICAgICAgICAgIHRoaXMuX3BhcmVudHMgPSBbcGFyZW50XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfcGFyZW50cy5pbmRleE9mKHBhcmVudCkgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBPbmx5IGFkZCB0aGUgbmV3IHBhcmVudCB0byB0aGUgX3BhcmVudHMgbGlzdCBpZiBpdCdzIG5vdCBhbHJlYWR5IHRoZXJlLlxuICAgICAgICAgICAgX3BhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKGVtcHR5KSB7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KG5ldyBTdWJzY3JpcHRpb24oKSkpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0cy5TdWJzY3JpcHRpb24gPSBTdWJzY3JpcHRpb247XG5mdW5jdGlvbiBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZXJyb3JzKSB7XG4gICAgcmV0dXJuIGVycm9ycy5yZWR1Y2UoZnVuY3Rpb24gKGVycnMsIGVycikgeyByZXR1cm4gZXJycy5jb25jYXQoKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3JfMS5VbnN1YnNjcmlwdGlvbkVycm9yKSA/IGVyci5lcnJvcnMgOiBlcnIpOyB9LCBbXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcnhqcy9TdWJzY3JpcHRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcm9vdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9yb290Jyk7XG52YXIgU3ltYm9sID0gcm9vdF8xLnJvb3QuU3ltYm9sO1xuZXhwb3J0cy5yeFN1YnNjcmliZXIgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLmZvciA9PT0gJ2Z1bmN0aW9uJykgP1xuICAgIFN5bWJvbC5mb3IoJ3J4U3Vic2NyaWJlcicpIDogJ0BAcnhTdWJzY3JpYmVyJztcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHJ4U3Vic2NyaWJlciBpbnN0ZWFkXG4gKi9cbmV4cG9ydHMuJCRyeFN1YnNjcmliZXIgPSBleHBvcnRzLnJ4U3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ4U3Vic2NyaWJlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL3N5bWJvbC9yeFN1YnNjcmliZXIuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHtcbiAgREFNUElOR19FUV9BLFxuICBEQU1QSU5HX0VRX0IsXG4gIERBTVBJTkdfRVFfQyxcbiAgVElDS1NfSU5ERU5ULFxuICBUSUNLU19MRU5HVEgsXG4gIFRJQ0tTX1BPU0lUSU9OX0lOREVOVCxcbiAgVElDS1NfVEVYVF9JTkRFTlRcbn0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IFBvaW50IGZyb20gJy4uL3N0cnVjdHVyZXMvcG9pbnQnO1xuaW1wb3J0IFNsaWNlIGZyb20gJy4uL3N0cnVjdHVyZXMvc2xpY2UnO1xuaW1wb3J0IFRleHQgZnJvbSAnLi4vc3RydWN0dXJlcy90ZXh0JztcbmltcG9ydCBUaWNrIGZyb20gJy4uL3N0cnVjdHVyZXMvdGljayc7XG5cbmNsYXNzIE1hdGhTZXJ2aWNlIHtcbiAgcHVibGljIG11bHRpcGx5KC4uLm51bWJlcnMpOiBudW1iZXIge1xuICAgIGNvbnN0IGZvcm1hdHRlZE51bWJlcnMgPSBudW1iZXJzLm1hcCh0aGlzLmZvcm1hdE51bWJlciksXG4gICAgICBmYWN0b3IgPSB0aGlzLmNvcnJlY3Rpb25GYWN0b3IoZm9ybWF0dGVkTnVtYmVycyk7XG5cbiAgICByZXR1cm4gZm9ybWF0dGVkTnVtYmVycy5tYXAodGhpcy5mb3JtYXROdW1iZXIpXG4gICAgICAucmVkdWNlKCh4LCB5KSA9PiB7XG4gICAgICAgIHJldHVybiAoeCAqIGZhY3RvcikgKiAoeSAqIGZhY3RvcikgLyAoZmFjdG9yICogZmFjdG9yKTtcbiAgICAgIH0sIDEpO1xuICB9XG5cbiAgcHVibGljIGNvcnJlY3Rpb25GYWN0b3IgPSAoLi4ubnVtYmVycyk6IG51bWJlciA9PiB7XG4gICAgcmV0dXJuIG51bWJlcnMucmVkdWNlKChwcmV2OiBudW1iZXIsIG5leHQ6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3QgbXAgPSB0aGlzLm11bHRpcGxpZXIocHJldiksXG4gICAgICAgICAgbW4gPSB0aGlzLm11bHRpcGxpZXIobmV4dCk7XG5cbiAgICAgIHJldHVybiBNYXRoLm1heChtcCwgbW4pO1xuICAgIH0sIDEpO1xuICB9XG5cbiAgcHVibGljIG11bHRpcGxpZXIgPSAoeDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICBjb25zdCBwYXJ0cyA9IHgudG9TdHJpbmcoKS5zcGxpdCgnLicpO1xuXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIHJldHVybiBNYXRoLnBvdygxMCwgcGFydHNbMV0ubGVuZ3RoKTtcbiAgfVxuXG4gIHB1YmxpYyBpc0Vwc2lsb24gPSAobjogbnVtYmVyID0gMCk6IGJvb2xlYW4gPT4gTWF0aC5hYnMobikgPCAxZS0xMDtcblxuICBwdWJsaWMgZm9ybWF0TnVtYmVyID0gKG46IG51bWJlciA9IDApOiBudW1iZXIgPT4gdGhpcy5pc0Vwc2lsb24obikgPyAwIDogbjtcblxuICBwdWJsaWMgZ2VuZXJhdGVTbGljZXMgPSAoc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHNjYWxlUmF0aW8pID0+IHtcblxuICAgIGNvbnN0IGNlbnRyYWxBbmdsZSA9IHRoaXMuY2FsY0NlbnRyYWxBbmdsZShzdGFydEFuZ2xlLCBlbmRBbmdsZSksXG4gICAgICBjYWxjUmF0aW8gPSB0aGlzLmNhbGNSYXRpby5iaW5kKHRoaXMsIGNlbnRyYWxBbmdsZSk7XG5cbiAgICBmdW5jdGlvbiogc2xpY2VzKCkge1xuICAgICAgbGV0IGkgPSAwLFxuICAgICAgICBwcmV2UmF0aW8gPSAwO1xuXG4gICAgICB3aGlsZSAoaSA8IHNjYWxlUmF0aW8ubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBjYWxjUmF0aW8oc2NhbGVSYXRpb1tpXSkgLSAoY2FsY1JhdGlvKHByZXZSYXRpbykpLFxuICAgICAgICAgIHNsaWNlID0gbmV3IFNsaWNlKHN0YXJ0QW5nbGUsIHN0YXJ0QW5nbGUgKyBzZWdtZW50KTtcblxuICAgICAgICB5aWVsZCBzbGljZTtcblxuICAgICAgICBzdGFydEFuZ2xlID0gc2xpY2UuZW5kQW5nbGU7XG4gICAgICAgIHByZXZSYXRpbyA9IHNjYWxlUmF0aW9baV07XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2xpY2VzKCk7XG4gIH1cblxuICBwdWJsaWMgZ2VuZXJhdGVUaWNrcyA9IChcbiAgICAgIGNlbnRlclg6IG51bWJlcixcbiAgICAgIGNlbnRlclk6IG51bWJlcixcbiAgICAgIHN0YXJ0QW5nbGU6IG51bWJlcixcbiAgICAgIGVuZEFuZ2xlOiBudW1iZXIsXG4gICAgICByYWRpdXM6IG51bWJlcixcbiAgICAgIHRpY2tzQ291bnQ6IG51bWJlclxuICApID0+IHtcbiAgICBjb25zdCB0b0NhcnRlc2lhbiA9IHRoaXMucG9sYXJUb0NhcnRlc2lhbi5iaW5kKHRoaXMsIGNlbnRlclgsIGNlbnRlclkpLFxuICAgICAgY2VudHJhbEFuZ2xlID0gdGhpcy5jYWxjQ2VudHJhbEFuZ2xlKHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKSxcbiAgICAgIHN0ZXBBbmdsZSA9IHRoaXMuY2FsY1N0ZXAoY2VudHJhbEFuZ2xlLCB0aWNrc0NvdW50KTtcblxuICAgIGZ1bmN0aW9uKiB0aWNrcygpIHtcbiAgICAgIGxldCBpID0gMCxcbiAgICAgICAgYW5nbGUgPSBzdGFydEFuZ2xlO1xuXG4gICAgICB3aGlsZSAoaSA8IHRpY2tzQ291bnQpIHtcbiAgICAgICAgeWllbGQgbmV3IFRpY2soXG4gICAgICAgICAgdG9DYXJ0ZXNpYW4ocmFkaXVzLCBhbmdsZSksXG4gICAgICAgICAgdG9DYXJ0ZXNpYW4ocmFkaXVzICsgVElDS1NfTEVOR1RILCBhbmdsZSlcbiAgICAgICAgKTtcblxuICAgICAgICBhbmdsZSArPSBzdGVwQW5nbGU7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGlja3MoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZW5lcmF0ZVRleHRzID0gKFxuICAgIGNlbnRlclg6IG51bWJlcixcbiAgICBjZW50ZXJZOiBudW1iZXIsXG4gICAgcmFkaXVzOiBudW1iZXIsXG4gICAgc3RhcnRBbmdsZTogbnVtYmVyLFxuICAgIGVuZEFuZ2xlOiBudW1iZXIsXG4gICAgdGlja3NDb3VudDogbnVtYmVyLFxuICAgIHRvdGFsTGVuZ3RoOiBudW1iZXJcbiAgKSA9PiB7XG4gICAgY29uc3QgY2VudHJhbEFuZ2xlID0gdGhpcy5jYWxjQ2VudHJhbEFuZ2xlKHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKSxcbiAgICAgIHN0ZXBBbmdsZSA9IHRoaXMuY2FsY1N0ZXAoY2VudHJhbEFuZ2xlLCB0aWNrc0NvdW50KSxcbiAgICAgIHN0ZXBQb3NpdGlvbiA9IHRoaXMuY2FsY1N0ZXAodG90YWxMZW5ndGgsIHRpY2tzQ291bnQpLFxuICAgICAgdG9DYXJ0ZXNpYW4gPSB0aGlzLnBvbGFyVG9DYXJ0ZXNpYW4uYmluZCh0aGlzLCBjZW50ZXJYLCBjZW50ZXJZKSxcbiAgICAgIHRvRGVncmVlID0gdGhpcy5yYWRpYW5zVG9EZWdyZWUuYmluZCh0aGlzKSxcbiAgICAgIHRleHRzUmFkaXVzID0gcmFkaXVzICsgKDIgKiBUSUNLU19JTkRFTlQpICsgVElDS1NfTEVOR1RIO1xuXG4gICAgZnVuY3Rpb24qIHRleHRzKCkge1xuICAgICAgbGV0IGkgPSAwLFxuICAgICAgICBwcmV2UG9zaXRpb24gPSB0b3RhbExlbmd0aCxcbiAgICAgICAgcHJldkFuZ2xlID0gZW5kQW5nbGU7XG5cbiAgICAgIHdoaWxlIChpIDwgdGlja3NDb3VudCkge1xuICAgICAgICB5aWVsZCBuZXcgVGV4dChcbiAgICAgICAgICBNYXRoLm1pbihcbiAgICAgICAgICAgIHRvdGFsTGVuZ3RoIC0gNSxcbiAgICAgICAgICAgIE1hdGgubWF4KHByZXZQb3NpdGlvbiAtIFRJQ0tTX1BPU0lUSU9OX0lOREVOVCwgNSlcbiAgICAgICAgICApLFxuICAgICAgICAgIGkudG9TdHJpbmcoKSxcbiAgICAgICAgICB0b0NhcnRlc2lhbih0ZXh0c1JhZGl1cyArIFRJQ0tTX1RFWFRfSU5ERU5ULCBwcmV2QW5nbGUpLFxuICAgICAgICAgIHRvRGVncmVlKE1hdGguUEkgLyAyIC0gcHJldkFuZ2xlKVxuICAgICAgICApO1xuXG4gICAgICAgIHByZXZBbmdsZSAtPSAgc3RlcEFuZ2xlO1xuICAgICAgICBwcmV2UG9zaXRpb24gLT0gc3RlcFBvc2l0aW9uO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHRzKCk7XG4gIH1cblxuICBwdWJsaWMgY2FsY1JhdGlvID0gKGNlbnRyYWxBbmdsZTogbnVtYmVyID0gMCwgcmF0aW86IG51bWJlciA9IDApOiBudW1iZXIgPT4ge1xuICAgIHJldHVybiBjZW50cmFsQW5nbGUgKiByYXRpbyAvIDEwMDtcbiAgfVxuXG4gIHB1YmxpYyBjYWxjU3RlcCA9ICh0b3RhbDogbnVtYmVyID0gMCwgY291bnQ6IG51bWJlciA9IDApOiBudW1iZXIgPT4ge1xuICAgIHJldHVybiB0b3RhbCAvIChjb3VudCAtIDEpO1xuICB9XG5cbiAgcHVibGljIGNhbGNDZW50cmFsQW5nbGUgPSAoc3RhcnRBbmdsZTogbnVtYmVyLCBlbmRBbmdsZTogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICByZXR1cm4gc3RhcnRBbmdsZSA8IGVuZEFuZ2xlID9cbiAgICAgIChlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpIDogKHN0YXJ0QW5nbGUgLSBlbmRBbmdsZSk7XG4gIH1cblxuICBwdWJsaWMgcmFkaWFuc1RvRGVncmVlID0gKHJhZGlhbnM6IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgcmV0dXJuIChyYWRpYW5zIC8gTWF0aC5QSSkgKiAxODA7XG4gIH1cblxuICBwdWJsaWMgcG9sYXJUb0NhcnRlc2lhbiA9IChcbiAgICBjZW50ZXJYOiBudW1iZXIgPSAwLFxuICAgIGNlbnRlclk6IG51bWJlciA9IDAsXG4gICAgcmFkaXVzOiBudW1iZXIgPSAwLFxuICAgIGFuZ2xlOiBudW1iZXIgPSAwXG4gICk6IFBvaW50ID0+IHtcblxuICAgIHJldHVybiBuZXcgUG9pbnQoXG4gICAgICBjZW50ZXJYICsgdGhpcy5tdWx0aXBseShyYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSkpLFxuICAgICAgY2VudGVyWSArIHRoaXMubXVsdGlwbHkocmFkaXVzICogTWF0aC5zaW4oYW5nbGUpKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgcmFkaWFuc1RvSGFuZFBvc2l0aW9uID0gKHJhZGlhbnM6IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgcmV0dXJuIHRoaXMucmFkaWFuc1RvRGVncmVlKC0xICogKHJhZGlhbnMgLSAoTWF0aC5QSSAvIDIpKSk7XG4gIH1cblxuICBwdWJsaWMgZGFtcGluZyh0aW1lOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBEQU1QSU5HX0VRX0EgKlxuICAgICAgKE1hdGguc2luKCBEQU1QSU5HX0VRX0IgKiB0aW1lICkgKiBNYXRoLmV4cCggLURBTVBJTkdfRVFfQyAqIHRpbWUgKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IE1hdGhTZXJ2aWNlKCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlciEuL3NyYy9zZXJ2aWNlcy9tYXRoLXNlcnZpY2UudHMiLCJpbXBvcnQge1xuICBTVkdfTkFNRVNQQUNFXG59IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmNsYXNzIERPTVV0aWwge1xuICBwcml2YXRlIHRocm90dGxlT3B0aW9uczogSVRocm90dGxlT3B0aW9ucyA9IHtcbiAgICBsZWFkaW5nOiB0cnVlLFxuICAgIHRyYWlsaW5nOiB0cnVlXG4gIH07XG5cbiAgLyoqXG4gICAqIHByaXZhdGUgY3JlYXRlU2hhZG93Um9vdCAtIGNyZWF0ZXMgc3ZnIGVsZW1lbnRcbiAgICogd2l0aCBjZXJ0YWluIG5hbWVzcGFjZXMgdG8gd29yayB3aXRoIGZ1cnRoZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge0RvY3VtZW50RnJhZ21lbnR9IHN2ZyBlbGVtZW50IHRvIGRpc3BsYXkgZ2F1Z2VcbiAgICovXG4gIHB1YmxpYyBjcmVhdGVTaGFkb3dSb290ID0gKHRlbXBsYXRlLCBzdHlsZSk6IERvY3VtZW50RnJhZ21lbnQgPT4ge1xuICAgIGNvbnN0IHRlbXBsYXRlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpLFxuICAgICAgc3R5bGVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyksXG4gICAgICBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgdGVtcGxhdGVFbC5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgICBzdHlsZUVsLmlubmVySFRNTCA9IHN0eWxlO1xuXG4gICAgY29udGVudC5hcHBlbmRDaGlsZChzdHlsZUVsKTtcbiAgICBjb250ZW50LmFwcGVuZENoaWxkKHRlbXBsYXRlRWwuY29udGVudCk7XG5cbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVFbGVtZW50ID0gKHRhZ05hbWUsIGNvdW50ID0gMSk6IERvY3VtZW50RnJhZ21lbnQgPT4ge1xuICAgIHJldHVybiBuZXcgQXJyYXkoY291bnQpXG4gICAgICAuZmlsbCgwKVxuICAgICAgLm1hcCgoKSA9PiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05BTUVTUEFDRSwgdGFnTmFtZSkpXG4gICAgICAucmVkdWNlKChmcmFnbWVudDogRG9jdW1lbnRGcmFnbWVudCwgZWxlbWVudCkgPT4ge1xuICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgICAgfSwgZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgRE9NVXRpbCgpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXIhLi9zcmMvdXRpbHMvZG9tLXV0aWwudHMiLCJpbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21hcCc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL3BhaXJ3aXNlJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvdGhyb3R0bGVUaW1lJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMvQmVoYXZpb3JTdWJqZWN0JztcbmltcG9ydCB7IFNDQUxFX0VORF9BTkdMRSB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBjb25zdCBzbGlkZXJWYWx1ZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4oU0NBTEVfRU5EX0FOR0xFKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyIS4vc3JjL3V0aWxzL3J4LXV0aWwudHMiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9pc0Z1bmN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gaXNPYmplY3QoeCkge1xuICAgIHJldHVybiB4ICE9IG51bGwgJiYgdHlwZW9mIHggPT09ICdvYmplY3QnO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNPYmplY3QuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL2lzT2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIHR5cGVvZiBhbnkgc28gdGhhdCBpdCB3ZSBkb24ndCBoYXZlIHRvIGNhc3Qgd2hlbiBjb21wYXJpbmcgYSByZXN1bHQgdG8gdGhlIGVycm9yIG9iamVjdFxuZXhwb3J0cy5lcnJvck9iamVjdCA9IHsgZToge30gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yT2JqZWN0LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9lcnJvck9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLmVtcHR5ID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHsgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24gKGVycikgeyB0aHJvdyBlcnI7IH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHsgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmVyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvT2JzZXJ2ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIHJvb3RfMSA9IHJlcXVpcmUoJy4uL3V0aWwvcm9vdCcpO1xuZnVuY3Rpb24gZ2V0U3ltYm9sT2JzZXJ2YWJsZShjb250ZXh0KSB7XG4gICAgdmFyICQkb2JzZXJ2YWJsZTtcbiAgICB2YXIgU3ltYm9sID0gY29udGV4dC5TeW1ib2w7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICAkJG9ic2VydmFibGUgPSBTeW1ib2wub2JzZXJ2YWJsZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICQkb2JzZXJ2YWJsZSA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuICAgICAgICAgICAgU3ltYm9sLm9ic2VydmFibGUgPSAkJG9ic2VydmFibGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgICQkb2JzZXJ2YWJsZSA9ICdAQG9ic2VydmFibGUnO1xuICAgIH1cbiAgICByZXR1cm4gJCRvYnNlcnZhYmxlO1xufVxuZXhwb3J0cy5nZXRTeW1ib2xPYnNlcnZhYmxlID0gZ2V0U3ltYm9sT2JzZXJ2YWJsZTtcbmV4cG9ydHMub2JzZXJ2YWJsZSA9IGdldFN5bWJvbE9ic2VydmFibGUocm9vdF8xLnJvb3QpO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2Ugb2JzZXJ2YWJsZSBpbnN0ZWFkXG4gKi9cbmV4cG9ydHMuJCRvYnNlcnZhYmxlID0gZXhwb3J0cy5vYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL3N5bWJvbC9vYnNlcnZhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xuLyoqXG4gKiBBbiBlcnJvciB0aHJvd24gd2hlbiBhbiBhY3Rpb24gaXMgaW52YWxpZCBiZWNhdXNlIHRoZSBvYmplY3QgaGFzIGJlZW5cbiAqIHVuc3Vic2NyaWJlZC5cbiAqXG4gKiBAc2VlIHtAbGluayBTdWJqZWN0fVxuICogQHNlZSB7QGxpbmsgQmVoYXZpb3JTdWJqZWN0fVxuICpcbiAqIEBjbGFzcyBPYmplY3RVbnN1YnNjcmliZWRFcnJvclxuICovXG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPYmplY3RVbnN1YnNjcmliZWRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpIHtcbiAgICAgICAgdmFyIGVyciA9IF9zdXBlci5jYWxsKHRoaXMsICdvYmplY3QgdW5zdWJzY3JpYmVkJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IGVyci5uYW1lID0gJ09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbiAgICAgICAgdGhpcy5zdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3RVbnN1YnNjcmliZWRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBPYmplY3RVbnN1YnNjcmliZWRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpY2UgaW1wbGVtZW50cyBJU2xpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgc3RhcnRBbmdsZTogbnVtYmVyID0gMCxcbiAgICBwdWJsaWMgZW5kQW5nbGU6IG51bWJlciA9IDBcbiAgKSB7fVxuXG4gIHB1YmxpYyBzZWdtZW50KCkge1xuICAgIHJldHVybiBNYXRoLmFicyh0aGlzLnN0YXJ0QW5nbGUgLSB0aGlzLmVuZEFuZ2xlKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXJlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhcnRBbmdsZSA+IHRoaXMuZW5kQW5nbGUgPyAtMSA6IDE7XG4gIH1cblxuICBwdWJsaWMgZW1wdHkoKSB7XG4gICAgcmV0dXJuICshKHRoaXMuc3RhcnRBbmdsZSAtIHRoaXMuZW5kQW5nbGUgPT09IDApO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlciEuL3NyYy9zdHJ1Y3R1cmVzL3NsaWNlLnRzIiwiaW1wb3J0IEdhdWdlIGZyb20gJy4vZ2F1Z2UnO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXBwLWdhdWdlJywgR2F1Z2UpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXIhLi9zcmMvaW5kZXgudHMiLCJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IG1hdGhTZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL21hdGgtc2VydmljZSc7XG5pbXBvcnQgU1ZHU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9zdmctc2VydmljZSc7XG5pbXBvcnQgRE9NVXRpbCBmcm9tICcuLi91dGlscy9kb20tdXRpbCc7XG5pbXBvcnQgeyBzbGlkZXJWYWx1ZSQgfSBmcm9tICcuLi91dGlscy9yeC11dGlsJztcbmltcG9ydCBSZW5kZXJlciBmcm9tICcuL3JlbmRlcmVyJztcbmltcG9ydCBzdHlsZSA9IHJlcXVpcmUoJy4vc3R5bGVzLmNzcycpO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGUuaHRtbCc7XG5cbmNsYXNzIEdhdWdlIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBwcml2YXRlIHJvb3Q6IERvY3VtZW50RnJhZ21lbnQ7XG4gIHByaXZhdGUgc3ZnRWw6IFNWR0VsZW1lbnQ7XG4gIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyO1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ3ZhbHVlJ1xuICAgIF07XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgY29uc3Qgc2hhZG93ID0gdGhpcy5hdHRhY2hTaGFkb3coe1xuICAgICAgbW9kZTogJ29wZW4nXG4gICAgfSk7XG5cbiAgICB0aGlzLnJvb3QgPSBET01VdGlsLmNyZWF0ZVNoYWRvd1Jvb3QodGVtcGxhdGUsIHN0eWxlKTtcbiAgICB0aGlzLnN2Z0VsID0gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpO1xuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIodGhpcy5zdmdFbCk7XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuXG4gICAgc2hhZG93LmFwcGVuZENoaWxkKHRoaXMucm9vdCk7XG4gIH1cblxuICBwcml2YXRlIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICB9XG5cbiAgcHJpdmF0ZSBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgYXR0cjogc3RyaW5nLFxuICAgIG9sZFZhbHVlOiBzdHJpbmcsXG4gICAgbmV3VmFsdWU6IHN0cmluZ1xuICApIHtcbiAgICBpZiAoYXR0ciA9PT0gJ3ZhbHVlJykge1xuICAgICAgc2xpZGVyVmFsdWUkLm5leHQoTnVtYmVyKG5ld1ZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXIoKSB7XG4gICAgdGhpcy5yZW5kZXJlci5yZW5kZXJTY2FsZSgpO1xuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyQXhpcygpO1xuICAgIHRoaXMucmVuZGVyZXIucmVuZGVySGFuZCgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdhdWdlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXIhLi9zcmMvZ2F1Z2UvaW5kZXgudHMiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgbWFwXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9tYXAnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5tYXAgPSBtYXBfMS5tYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcnhqcy9hZGQvb3BlcmF0b3IvbWFwLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbnZhciByeFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL3N5bWJvbC9yeFN1YnNjcmliZXInKTtcbnZhciBPYnNlcnZlcl8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2ZXInKTtcbmZ1bmN0aW9uIHRvU3Vic2NyaWJlcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgaWYgKG5leHRPck9ic2VydmVyKSB7XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlciBpbnN0YW5jZW9mIFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlcl8xLnJ4U3Vic2NyaWJlcl0pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0T3JPYnNlcnZlcltyeFN1YnNjcmliZXJfMS5yeFN1YnNjcmliZXJdKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFuZXh0T3JPYnNlcnZlciAmJiAhZXJyb3IgJiYgIWNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIoT2JzZXJ2ZXJfMS5lbXB0eSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSk7XG59XG5leHBvcnRzLnRvU3Vic2NyaWJlciA9IHRvU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvU3Vic2NyaWJlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvdG9TdWJzY3JpYmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvaXNBcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZXJyb3JPYmplY3RfMSA9IHJlcXVpcmUoJy4vZXJyb3JPYmplY3QnKTtcbnZhciB0cnlDYXRjaFRhcmdldDtcbmZ1bmN0aW9uIHRyeUNhdGNoZXIoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRyeUNhdGNoVGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSA9IGU7XG4gICAgICAgIHJldHVybiBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyeUNhdGNoKGZuKSB7XG4gICAgdHJ5Q2F0Y2hUYXJnZXQgPSBmbjtcbiAgICByZXR1cm4gdHJ5Q2F0Y2hlcjtcbn1cbmV4cG9ydHMudHJ5Q2F0Y2ggPSB0cnlDYXRjaDtcbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyeUNhdGNoLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC90cnlDYXRjaC5qc1xuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gb25lIG9yIG1vcmUgZXJyb3JzIGhhdmUgb2NjdXJyZWQgZHVyaW5nIHRoZVxuICogYHVuc3Vic2NyaWJlYCBvZiBhIHtAbGluayBTdWJzY3JpcHRpb259LlxuICovXG52YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFVuc3Vic2NyaXB0aW9uRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICB2YXIgZXJyID0gRXJyb3IuY2FsbCh0aGlzLCBlcnJvcnMgP1xuICAgICAgICAgICAgZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuICBcIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gKChpICsgMSkgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKSk7IH0pLmpvaW4oJ1xcbiAgJykgOiAnJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IGVyci5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIFVuc3Vic2NyaXB0aW9uRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlVuc3Vic2NyaXB0aW9uRXJyb3IgPSBVbnN1YnNjcmlwdGlvbkVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG4vKipcbiAqIEFwcGxpZXMgYSBnaXZlbiBgcHJvamVjdGAgZnVuY3Rpb24gdG8gZWFjaCB2YWx1ZSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUsIGFuZCBlbWl0cyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBhcyBhbiBPYnNlcnZhYmxlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5MaWtlIFtBcnJheS5wcm90b3R5cGUubWFwKCldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L21hcCksXG4gKiBpdCBwYXNzZXMgZWFjaCBzb3VyY2UgdmFsdWUgdGhyb3VnaCBhIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIHRvIGdldFxuICogY29ycmVzcG9uZGluZyBvdXRwdXQgdmFsdWVzLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL21hcC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBTaW1pbGFyIHRvIHRoZSB3ZWxsIGtub3duIGBBcnJheS5wcm90b3R5cGUubWFwYCBmdW5jdGlvbiwgdGhpcyBvcGVyYXRvclxuICogYXBwbGllcyBhIHByb2plY3Rpb24gdG8gZWFjaCB2YWx1ZSBhbmQgZW1pdHMgdGhhdCBwcm9qZWN0aW9uIGluIHRoZSBvdXRwdXRcbiAqIE9ic2VydmFibGUuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+TWFwIGV2ZXJ5IGNsaWNrIHRvIHRoZSBjbGllbnRYIHBvc2l0aW9uIG9mIHRoYXQgY2xpY2s8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHBvc2l0aW9ucyA9IGNsaWNrcy5tYXAoZXYgPT4gZXYuY2xpZW50WCk7XG4gKiBwb3NpdGlvbnMuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIG1hcFRvfVxuICogQHNlZSB7QGxpbmsgcGx1Y2t9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgaW5kZXg6IG51bWJlcik6IFJ9IHByb2plY3QgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5XG4gKiB0byBlYWNoIGB2YWx1ZWAgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuIFRoZSBgaW5kZXhgIHBhcmFtZXRlciBpc1xuICogdGhlIG51bWJlciBgaWAgZm9yIHRoZSBpLXRoIGVtaXNzaW9uIHRoYXQgaGFzIGhhcHBlbmVkIHNpbmNlIHRoZVxuICogc3Vic2NyaXB0aW9uLCBzdGFydGluZyBmcm9tIHRoZSBudW1iZXIgYDBgLlxuICogQHBhcmFtIHthbnl9IFt0aGlzQXJnXSBBbiBvcHRpb25hbCBhcmd1bWVudCB0byBkZWZpbmUgd2hhdCBgdGhpc2AgaXMgaW4gdGhlXG4gKiBgcHJvamVjdGAgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFI+fSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUgdHJhbnNmb3JtZWQgYnkgdGhlIGdpdmVuIGBwcm9qZWN0YCBmdW5jdGlvbi5cbiAqIEBtZXRob2QgbWFwXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIGlmICh0eXBlb2YgcHJvamVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBpcyBub3QgYSBmdW5jdGlvbi4gQXJlIHlvdSBsb29raW5nIGZvciBgbWFwVG8oKWA/Jyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IE1hcE9wZXJhdG9yKHByb2plY3QsIHRoaXNBcmcpKTtcbn1cbmV4cG9ydHMubWFwID0gbWFwO1xudmFyIE1hcE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBPcGVyYXRvcihwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMudGhpc0FyZyA9IHRoaXNBcmc7XG4gICAgfVxuICAgIE1hcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgTWFwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByb2plY3QsIHRoaXMudGhpc0FyZykpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hcE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydHMuTWFwT3BlcmF0b3IgPSBNYXBPcGVyYXRvcjtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgTWFwU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1hcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgdGhpc0FyZykge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnIHx8IHRoaXM7XG4gICAgfVxuICAgIC8vIE5PVEU6IFRoaXMgbG9va3MgdW5vcHRpbWl6ZWQsIGJ1dCBpdCdzIGFjdHVhbGx5IHB1cnBvc2VmdWxseSBOT1RcbiAgICAvLyB1c2luZyB0cnkvY2F0Y2ggb3B0aW1pemF0aW9ucy5cbiAgICBNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0LmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5jb3VudCsrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL29wZXJhdG9yL21hcC5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHBhaXJ3aXNlXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9wYWlyd2lzZScpO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLnBhaXJ3aXNlID0gcGFpcndpc2VfMS5wYWlyd2lzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhaXJ3aXNlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvYWRkL29wZXJhdG9yL3BhaXJ3aXNlLmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbi8qKlxuICogR3JvdXBzIHBhaXJzIG9mIGNvbnNlY3V0aXZlIGVtaXNzaW9ucyB0b2dldGhlciBhbmQgZW1pdHMgdGhlbSBhcyBhbiBhcnJheSBvZlxuICogdHdvIHZhbHVlcy5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+UHV0cyB0aGUgY3VycmVudCB2YWx1ZSBhbmQgcHJldmlvdXMgdmFsdWUgdG9nZXRoZXIgYXNcbiAqIGFuIGFycmF5LCBhbmQgZW1pdHMgdGhhdC48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9wYWlyd2lzZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBUaGUgTnRoIGVtaXNzaW9uIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHdpbGwgY2F1c2UgdGhlIG91dHB1dCBPYnNlcnZhYmxlXG4gKiB0byBlbWl0IGFuIGFycmF5IFsoTi0xKXRoLCBOdGhdIG9mIHRoZSBwcmV2aW91cyBhbmQgdGhlIGN1cnJlbnQgdmFsdWUsIGFzIGFcbiAqIHBhaXIuIEZvciB0aGlzIHJlYXNvbiwgYHBhaXJ3aXNlYCBlbWl0cyBvbiB0aGUgc2Vjb25kIGFuZCBzdWJzZXF1ZW50XG4gKiBlbWlzc2lvbnMgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUsIGJ1dCBub3Qgb24gdGhlIGZpcnN0IGVtaXNzaW9uLCBiZWNhdXNlXG4gKiB0aGVyZSBpcyBubyBwcmV2aW91cyB2YWx1ZSBpbiB0aGF0IGNhc2UuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+T24gZXZlcnkgY2xpY2sgKHN0YXJ0aW5nIGZyb20gdGhlIHNlY29uZCksIGVtaXQgdGhlIHJlbGF0aXZlIGRpc3RhbmNlIHRvIHRoZSBwcmV2aW91cyBjbGljazwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgcGFpcnMgPSBjbGlja3MucGFpcndpc2UoKTtcbiAqIHZhciBkaXN0YW5jZSA9IHBhaXJzLm1hcChwYWlyID0+IHtcbiAqICAgdmFyIHgwID0gcGFpclswXS5jbGllbnRYO1xuICogICB2YXIgeTAgPSBwYWlyWzBdLmNsaWVudFk7XG4gKiAgIHZhciB4MSA9IHBhaXJbMV0uY2xpZW50WDtcbiAqICAgdmFyIHkxID0gcGFpclsxXS5jbGllbnRZO1xuICogICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHgwIC0geDEsIDIpICsgTWF0aC5wb3coeTAgLSB5MSwgMikpO1xuICogfSk7XG4gKiBkaXN0YW5jZS5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgYnVmZmVyfVxuICogQHNlZSB7QGxpbmsgYnVmZmVyQ291bnR9XG4gKlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxBcnJheTxUPj59IEFuIE9ic2VydmFibGUgb2YgcGFpcnMgKGFzIGFycmF5cykgb2ZcbiAqIGNvbnNlY3V0aXZlIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEBtZXRob2QgcGFpcndpc2VcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHBhaXJ3aXNlKCkge1xuICAgIHJldHVybiB0aGlzLmxpZnQobmV3IFBhaXJ3aXNlT3BlcmF0b3IoKSk7XG59XG5leHBvcnRzLnBhaXJ3aXNlID0gcGFpcndpc2U7XG52YXIgUGFpcndpc2VPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGFpcndpc2VPcGVyYXRvcigpIHtcbiAgICB9XG4gICAgUGFpcndpc2VPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFBhaXJ3aXNlU3Vic2NyaWJlcihzdWJzY3JpYmVyKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUGFpcndpc2VPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFBhaXJ3aXNlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBhaXJ3aXNlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQYWlyd2lzZVN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmhhc1ByZXYgPSBmYWxzZTtcbiAgICB9XG4gICAgUGFpcndpc2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5oYXNQcmV2KSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoW3RoaXMucHJldiwgdmFsdWVdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGFzUHJldiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmV2ID0gdmFsdWU7XG4gICAgfTtcbiAgICByZXR1cm4gUGFpcndpc2VTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFpcndpc2UuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcnhqcy9vcGVyYXRvci9wYWlyd2lzZS5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIHRocm90dGxlVGltZV8xID0gcmVxdWlyZSgnLi4vLi4vb3BlcmF0b3IvdGhyb3R0bGVUaW1lJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUudGhyb3R0bGVUaW1lID0gdGhyb3R0bGVUaW1lXzEudGhyb3R0bGVUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGVUaW1lLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvYWRkL29wZXJhdG9yL3Rocm90dGxlVGltZS5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJy4uL3NjaGVkdWxlci9hc3luYycpO1xudmFyIHRocm90dGxlXzEgPSByZXF1aXJlKCcuL3Rocm90dGxlJyk7XG4vKipcbiAqIEVtaXRzIGEgdmFsdWUgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUsIHRoZW4gaWdub3JlcyBzdWJzZXF1ZW50IHNvdXJjZVxuICogdmFsdWVzIGZvciBgZHVyYXRpb25gIG1pbGxpc2Vjb25kcywgdGhlbiByZXBlYXRzIHRoaXMgcHJvY2Vzcy5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TGV0cyBhIHZhbHVlIHBhc3MsIHRoZW4gaWdub3JlcyBzb3VyY2UgdmFsdWVzIGZvciB0aGVcbiAqIG5leHQgYGR1cmF0aW9uYCBtaWxsaXNlY29uZHMuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvdGhyb3R0bGVUaW1lLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIGB0aHJvdHRsZVRpbWVgIGVtaXRzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlXG4gKiB3aGVuIGl0cyBpbnRlcm5hbCB0aW1lciBpcyBkaXNhYmxlZCwgYW5kIGlnbm9yZXMgc291cmNlIHZhbHVlcyB3aGVuIHRoZSB0aW1lclxuICogaXMgZW5hYmxlZC4gSW5pdGlhbGx5LCB0aGUgdGltZXIgaXMgZGlzYWJsZWQuIEFzIHNvb24gYXMgdGhlIGZpcnN0IHNvdXJjZVxuICogdmFsdWUgYXJyaXZlcywgaXQgaXMgZm9yd2FyZGVkIHRvIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSwgYW5kIHRoZW4gdGhlIHRpbWVyXG4gKiBpcyBlbmFibGVkLiBBZnRlciBgZHVyYXRpb25gIG1pbGxpc2Vjb25kcyAob3IgdGhlIHRpbWUgdW5pdCBkZXRlcm1pbmVkXG4gKiBpbnRlcm5hbGx5IGJ5IHRoZSBvcHRpb25hbCBgc2NoZWR1bGVyYCkgaGFzIHBhc3NlZCwgdGhlIHRpbWVyIGlzIGRpc2FibGVkLFxuICogYW5kIHRoaXMgcHJvY2VzcyByZXBlYXRzIGZvciB0aGUgbmV4dCBzb3VyY2UgdmFsdWUuIE9wdGlvbmFsbHkgdGFrZXMgYVxuICoge0BsaW5rIElTY2hlZHVsZXJ9IGZvciBtYW5hZ2luZyB0aW1lcnMuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCBjbGlja3MgYXQgYSByYXRlIG9mIGF0IG1vc3Qgb25lIGNsaWNrIHBlciBzZWNvbmQ8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIHJlc3VsdCA9IGNsaWNrcy50aHJvdHRsZVRpbWUoMTAwMCk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGF1ZGl0VGltZX1cbiAqIEBzZWUge0BsaW5rIGRlYm91bmNlVGltZX1cbiAqIEBzZWUge0BsaW5rIGRlbGF5fVxuICogQHNlZSB7QGxpbmsgc2FtcGxlVGltZX1cbiAqIEBzZWUge0BsaW5rIHRocm90dGxlfVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBUaW1lIHRvIHdhaXQgYmVmb3JlIGVtaXR0aW5nIGFub3RoZXIgdmFsdWUgYWZ0ZXJcbiAqIGVtaXR0aW5nIHRoZSBsYXN0IHZhbHVlLCBtZWFzdXJlZCBpbiBtaWxsaXNlY29uZHMgb3IgdGhlIHRpbWUgdW5pdCBkZXRlcm1pbmVkXG4gKiBpbnRlcm5hbGx5IGJ5IHRoZSBvcHRpb25hbCBgc2NoZWR1bGVyYC5cbiAqIEBwYXJhbSB7U2NoZWR1bGVyfSBbc2NoZWR1bGVyPWFzeW5jXSBUaGUge0BsaW5rIElTY2hlZHVsZXJ9IHRvIHVzZSBmb3JcbiAqIG1hbmFnaW5nIHRoZSB0aW1lcnMgdGhhdCBoYW5kbGUgdGhlIHRocm90dGxpbmcuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFQ+fSBBbiBPYnNlcnZhYmxlIHRoYXQgcGVyZm9ybXMgdGhlIHRocm90dGxlIG9wZXJhdGlvbiB0b1xuICogbGltaXQgdGhlIHJhdGUgb2YgZW1pc3Npb25zIGZyb20gdGhlIHNvdXJjZS5cbiAqIEBtZXRob2QgdGhyb3R0bGVUaW1lXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiB0aHJvdHRsZVRpbWUoZHVyYXRpb24sIHNjaGVkdWxlciwgY29uZmlnKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmM7IH1cbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHsgY29uZmlnID0gdGhyb3R0bGVfMS5kZWZhdWx0VGhyb3R0bGVDb25maWc7IH1cbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUaHJvdHRsZVRpbWVPcGVyYXRvcihkdXJhdGlvbiwgc2NoZWR1bGVyLCBjb25maWcubGVhZGluZywgY29uZmlnLnRyYWlsaW5nKSk7XG59XG5leHBvcnRzLnRocm90dGxlVGltZSA9IHRocm90dGxlVGltZTtcbnZhciBUaHJvdHRsZVRpbWVPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGhyb3R0bGVUaW1lT3BlcmF0b3IoZHVyYXRpb24sIHNjaGVkdWxlciwgbGVhZGluZywgdHJhaWxpbmcpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy5sZWFkaW5nID0gbGVhZGluZztcbiAgICAgICAgdGhpcy50cmFpbGluZyA9IHRyYWlsaW5nO1xuICAgIH1cbiAgICBUaHJvdHRsZVRpbWVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRocm90dGxlVGltZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5kdXJhdGlvbiwgdGhpcy5zY2hlZHVsZXIsIHRoaXMubGVhZGluZywgdGhpcy50cmFpbGluZykpO1xuICAgIH07XG4gICAgcmV0dXJuIFRocm90dGxlVGltZU9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgVGhyb3R0bGVUaW1lU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRocm90dGxlVGltZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGhyb3R0bGVUaW1lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgZHVyYXRpb24sIHNjaGVkdWxlciwgbGVhZGluZywgdHJhaWxpbmcpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmxlYWRpbmcgPSBsZWFkaW5nO1xuICAgICAgICB0aGlzLnRyYWlsaW5nID0gdHJhaWxpbmc7XG4gICAgICAgIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdHJhaWxpbmdWYWx1ZSA9IG51bGw7XG4gICAgfVxuICAgIFRocm90dGxlVGltZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnRocm90dGxlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudHJhaWxpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFpbGluZ1ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFzVHJhaWxpbmdWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZCh0aGlzLnRocm90dGxlZCA9IHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoTmV4dCwgdGhpcy5kdXJhdGlvbiwgeyBzdWJzY3JpYmVyOiB0aGlzIH0pKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmxlYWRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVRpbWVTdWJzY3JpYmVyLnByb3RvdHlwZS5jbGVhclRocm90dGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhyb3R0bGVkID0gdGhpcy50aHJvdHRsZWQ7XG4gICAgICAgIGlmICh0aHJvdHRsZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWlsaW5nICYmIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodGhpcy5fdHJhaWxpbmdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhaWxpbmdWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFzVHJhaWxpbmdWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3R0bGVkLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZSh0aHJvdHRsZWQpO1xuICAgICAgICAgICAgdGhpcy50aHJvdHRsZWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVGhyb3R0bGVUaW1lU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmZ1bmN0aW9uIGRpc3BhdGNoTmV4dChhcmcpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyO1xuICAgIHN1YnNjcmliZXIuY2xlYXJUaHJvdHRsZSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGVUaW1lLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvb3BlcmF0b3IvdGhyb3R0bGVUaW1lLmpzXG4vLyBtb2R1bGUgaWQgPSAyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBBc3luY0FjdGlvbl8xID0gcmVxdWlyZSgnLi9Bc3luY0FjdGlvbicpO1xudmFyIEFzeW5jU2NoZWR1bGVyXzEgPSByZXF1aXJlKCcuL0FzeW5jU2NoZWR1bGVyJyk7XG4vKipcbiAqXG4gKiBBc3luYyBTY2hlZHVsZXJcbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+U2NoZWR1bGUgdGFzayBhcyBpZiB5b3UgdXNlZCBzZXRUaW1lb3V0KHRhc2ssIGR1cmF0aW9uKTwvc3Bhbj5cbiAqXG4gKiBgYXN5bmNgIHNjaGVkdWxlciBzY2hlZHVsZXMgdGFza3MgYXN5bmNocm9ub3VzbHksIGJ5IHB1dHRpbmcgdGhlbSBvbiB0aGUgSmF2YVNjcmlwdFxuICogZXZlbnQgbG9vcCBxdWV1ZS4gSXQgaXMgYmVzdCB1c2VkIHRvIGRlbGF5IHRhc2tzIGluIHRpbWUgb3IgdG8gc2NoZWR1bGUgdGFza3MgcmVwZWF0aW5nXG4gKiBpbiBpbnRlcnZhbHMuXG4gKlxuICogSWYgeW91IGp1c3Qgd2FudCB0byBcImRlZmVyXCIgdGFzaywgdGhhdCBpcyB0byBwZXJmb3JtIGl0IHJpZ2h0IGFmdGVyIGN1cnJlbnRseVxuICogZXhlY3V0aW5nIHN5bmNocm9ub3VzIGNvZGUgZW5kcyAoY29tbW9ubHkgYWNoaWV2ZWQgYnkgYHNldFRpbWVvdXQoZGVmZXJyZWRUYXNrLCAwKWApLFxuICogYmV0dGVyIGNob2ljZSB3aWxsIGJlIHRoZSB7QGxpbmsgYXNhcH0gc2NoZWR1bGVyLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlVzZSBhc3luYyBzY2hlZHVsZXIgdG8gZGVsYXkgdGFzazwvY2FwdGlvbj5cbiAqIGNvbnN0IHRhc2sgPSAoKSA9PiBjb25zb2xlLmxvZygnaXQgd29ya3MhJyk7XG4gKlxuICogUnguU2NoZWR1bGVyLmFzeW5jLnNjaGVkdWxlKHRhc2ssIDIwMDApO1xuICpcbiAqIC8vIEFmdGVyIDIgc2Vjb25kcyBsb2dzOlxuICogLy8gXCJpdCB3b3JrcyFcIlxuICpcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5Vc2UgYXN5bmMgc2NoZWR1bGVyIHRvIHJlcGVhdCB0YXNrIGluIGludGVydmFsczwvY2FwdGlvbj5cbiAqIGZ1bmN0aW9uIHRhc2soc3RhdGUpIHtcbiAqICAgY29uc29sZS5sb2coc3RhdGUpO1xuICogICB0aGlzLnNjaGVkdWxlKHN0YXRlICsgMSwgMTAwMCk7IC8vIGB0aGlzYCByZWZlcmVuY2VzIGN1cnJlbnRseSBleGVjdXRpbmcgQWN0aW9uLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIHdlIHJlc2NoZWR1bGUgd2l0aCBuZXcgc3RhdGUgYW5kIGRlbGF5XG4gKiB9XG4gKlxuICogUnguU2NoZWR1bGVyLmFzeW5jLnNjaGVkdWxlKHRhc2ssIDMwMDAsIDApO1xuICpcbiAqIC8vIExvZ3M6XG4gKiAvLyAwIGFmdGVyIDNzXG4gKiAvLyAxIGFmdGVyIDRzXG4gKiAvLyAyIGFmdGVyIDVzXG4gKiAvLyAzIGFmdGVyIDZzXG4gKlxuICogQHN0YXRpYyB0cnVlXG4gKiBAbmFtZSBhc3luY1xuICogQG93bmVyIFNjaGVkdWxlclxuICovXG5leHBvcnRzLmFzeW5jID0gbmV3IEFzeW5jU2NoZWR1bGVyXzEuQXN5bmNTY2hlZHVsZXIoQXN5bmNBY3Rpb25fMS5Bc3luY0FjdGlvbik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL3NjaGVkdWxlci9hc3luYy5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciByb290XzEgPSByZXF1aXJlKCcuLi91dGlsL3Jvb3QnKTtcbnZhciBBY3Rpb25fMSA9IHJlcXVpcmUoJy4vQWN0aW9uJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIEFzeW5jQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yayk7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvLyBBbHdheXMgcmVwbGFjZSB0aGUgY3VycmVudCBzdGF0ZSB3aXRoIHRoZSBuZXcgc3RhdGUuXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgLy8gU2V0IHRoZSBwZW5kaW5nIGZsYWcgaW5kaWNhdGluZyB0aGF0IHRoaXMgYWN0aW9uIGhhcyBiZWVuIHNjaGVkdWxlZCwgb3JcbiAgICAgICAgLy8gaGFzIHJlY3Vyc2l2ZWx5IHJlc2NoZWR1bGVkIGl0c2VsZi5cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICAvL1xuICAgICAgICAvLyBJbXBvcnRhbnQgaW1wbGVtZW50YXRpb24gbm90ZTpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gQWN0aW9ucyBvbmx5IGV4ZWN1dGUgb25jZSBieSBkZWZhdWx0LCB1bmxlc3MgcmVzY2hlZHVsZWQgZnJvbSB3aXRoaW4gdGhlXG4gICAgICAgIC8vIHNjaGVkdWxlZCBjYWxsYmFjay4gVGhpcyBhbGxvd3MgdXMgdG8gaW1wbGVtZW50IHNpbmdsZSBhbmQgcmVwZWF0XG4gICAgICAgIC8vIGFjdGlvbnMgdmlhIHRoZSBzYW1lIGNvZGUgcGF0aCwgd2l0aG91dCBhZGRpbmcgQVBJIHN1cmZhY2UgYXJlYSwgYXMgd2VsbFxuICAgICAgICAvLyBhcyBtaW1pYyB0cmFkaXRpb25hbCByZWN1cnNpb24gYnV0IGFjcm9zcyBhc3luY2hyb25vdXMgYm91bmRhcmllcy5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSG93ZXZlciwgSlMgcnVudGltZXMgYW5kIHRpbWVycyBkaXN0aW5ndWlzaCBiZXR3ZWVuIGludGVydmFscyBhY2hpZXZlZCBieVxuICAgICAgICAvLyBzZXJpYWwgYHNldFRpbWVvdXRgIGNhbGxzIHZzLiBhIHNpbmdsZSBgc2V0SW50ZXJ2YWxgIGNhbGwuIEFuIGludGVydmFsIG9mXG4gICAgICAgIC8vIHNlcmlhbCBgc2V0VGltZW91dGAgY2FsbHMgY2FuIGJlIGluZGl2aWR1YWxseSBkZWxheWVkLCB3aGljaCBkZWxheXNcbiAgICAgICAgLy8gc2NoZWR1bGluZyB0aGUgbmV4dCBgc2V0VGltZW91dGAsIGFuZCBzbyBvbi4gYHNldEludGVydmFsYCBhdHRlbXB0cyB0b1xuICAgICAgICAvLyBndWFyYW50ZWUgdGhlIGludGVydmFsIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZCBtb3JlIHByZWNpc2VseSB0byB0aGVcbiAgICAgICAgLy8gaW50ZXJ2YWwgcGVyaW9kLCByZWdhcmRsZXNzIG9mIGxvYWQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoZXJlZm9yZSwgd2UgdXNlIGBzZXRJbnRlcnZhbGAgdG8gc2NoZWR1bGUgc2luZ2xlIGFuZCByZXBlYXQgYWN0aW9ucy5cbiAgICAgICAgLy8gSWYgdGhlIGFjdGlvbiByZXNjaGVkdWxlcyBpdHNlbGYgd2l0aCB0aGUgc2FtZSBkZWxheSwgdGhlIGludGVydmFsIGlzIG5vdFxuICAgICAgICAvLyBjYW5jZWxlZC4gSWYgdGhlIGFjdGlvbiBkb2Vzbid0IHJlc2NoZWR1bGUsIG9yIHJlc2NoZWR1bGVzIHdpdGggYVxuICAgICAgICAvLyBkaWZmZXJlbnQgZGVsYXksIHRoZSBpbnRlcnZhbCB3aWxsIGJlIGNhbmNlbGVkIGFmdGVyIHNjaGVkdWxlZCBjYWxsYmFja1xuICAgICAgICAvLyBleGVjdXRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICAvLyBJZiB0aGlzIGFjdGlvbiBoYXMgYWxyZWFkeSBhbiBhc3luYyBJZCwgZG9uJ3QgcmVxdWVzdCBhIG5ldyBvbmUuXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmlkIHx8IHRoaXMucmVxdWVzdEFzeW5jSWQoc2NoZWR1bGVyLCB0aGlzLmlkLCBkZWxheSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gcm9vdF8xLnJvb3Quc2V0SW50ZXJ2YWwoc2NoZWR1bGVyLmZsdXNoLmJpbmQoc2NoZWR1bGVyLCB0aGlzKSwgZGVsYXkpO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICAvLyBJZiB0aGlzIGFjdGlvbiBpcyByZXNjaGVkdWxlZCB3aXRoIHRoZSBzYW1lIGRlbGF5IHRpbWUsIGRvbid0IGNsZWFyIHRoZSBpbnRlcnZhbCBpZC5cbiAgICAgICAgaWYgKGRlbGF5ICE9PSBudWxsICYmIHRoaXMuZGVsYXkgPT09IGRlbGF5ICYmIHRoaXMucGVuZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UsIGlmIHRoZSBhY3Rpb24ncyBkZWxheSB0aW1lIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBjdXJyZW50IGRlbGF5LFxuICAgICAgICAvLyBvciB0aGUgYWN0aW9uIGhhcyBiZWVuIHJlc2NoZWR1bGVkIGJlZm9yZSBpdCdzIGV4ZWN1dGVkLCBjbGVhciB0aGUgaW50ZXJ2YWwgaWRcbiAgICAgICAgcmV0dXJuIHJvb3RfMS5yb290LmNsZWFySW50ZXJ2YWwoaWQpICYmIHVuZGVmaW5lZCB8fCB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJbW1lZGlhdGVseSBleGVjdXRlcyB0aGlzIGFjdGlvbiBhbmQgdGhlIGB3b3JrYCBpdCBjb250YWlucy5cbiAgICAgKiBAcmV0dXJuIHthbnl9XG4gICAgICovXG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignZXhlY3V0aW5nIGEgY2FuY2VsbGVkIGFjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVuZGluZyA9PT0gZmFsc2UgJiYgdGhpcy5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBEZXF1ZXVlIGlmIHRoZSBhY3Rpb24gZGlkbid0IHJlc2NoZWR1bGUgaXRzZWxmLiBEb24ndCBjYWxsXG4gICAgICAgICAgICAvLyB1bnN1YnNjcmliZSgpLCBiZWNhdXNlIHRoZSBhY3Rpb24gY291bGQgcmVzY2hlZHVsZSBsYXRlci5cbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOlxuICAgICAgICAgICAgLy8gYGBgXG4gICAgICAgICAgICAvLyBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gZG9Xb3JrKGNvdW50ZXIpIHtcbiAgICAgICAgICAgIC8vICAgLyogLi4uIEknbSBhIGJ1c3kgd29ya2VyIGJlZSAuLi4gKi9cbiAgICAgICAgICAgIC8vICAgdmFyIG9yaWdpbmFsQWN0aW9uID0gdGhpcztcbiAgICAgICAgICAgIC8vICAgLyogd2FpdCAxMDBtcyBiZWZvcmUgcmVzY2hlZHVsaW5nIHRoZSBhY3Rpb24gKi9cbiAgICAgICAgICAgIC8vICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyAgICAgb3JpZ2luYWxBY3Rpb24uc2NoZWR1bGUoY291bnRlciArIDEpO1xuICAgICAgICAgICAgLy8gICB9LCAxMDApO1xuICAgICAgICAgICAgLy8gfSwgMTAwMCk7XG4gICAgICAgICAgICAvLyBgYGBcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHRoaXMuc2NoZWR1bGVyLCB0aGlzLmlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLl9leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud29yayhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9ICEhZSAmJiBlIHx8IG5ldyBFcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JlZCkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yVmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgdmFyIGluZGV4ID0gYWN0aW9ucy5pbmRleE9mKHRoaXMpO1xuICAgICAgICB0aGlzLndvcmsgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgYWN0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGF5ID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uXzEuQWN0aW9uKSk7XG5leHBvcnRzLkFzeW5jQWN0aW9uID0gQXN5bmNBY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY0FjdGlvbi5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmlwdGlvbicpO1xuLyoqXG4gKiBBIHVuaXQgb2Ygd29yayB0byBiZSBleGVjdXRlZCBpbiBhIHtAbGluayBTY2hlZHVsZXJ9LiBBbiBhY3Rpb24gaXMgdHlwaWNhbGx5XG4gKiBjcmVhdGVkIGZyb20gd2l0aGluIGEgU2NoZWR1bGVyIGFuZCBhbiBSeEpTIHVzZXIgZG9lcyBub3QgbmVlZCB0byBjb25jZXJuXG4gKiB0aGVtc2VsdmVzIGFib3V0IGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgYW4gQWN0aW9uLlxuICpcbiAqIGBgYHRzXG4gKiBjbGFzcyBBY3Rpb248VD4gZXh0ZW5kcyBTdWJzY3JpcHRpb24ge1xuICogICBuZXcgKHNjaGVkdWxlcjogU2NoZWR1bGVyLCB3b3JrOiAoc3RhdGU/OiBUKSA9PiB2b2lkKTtcbiAqICAgc2NoZWR1bGUoc3RhdGU/OiBULCBkZWxheTogbnVtYmVyID0gMCk6IFN1YnNjcmlwdGlvbjtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBjbGFzcyBBY3Rpb248VD5cbiAqL1xudmFyIEFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgdGhpcyBhY3Rpb24gb24gaXRzIHBhcmVudCBTY2hlZHVsZXIgZm9yIGV4ZWN1dGlvbi4gTWF5IGJlIHBhc3NlZFxuICAgICAqIHNvbWUgY29udGV4dCBvYmplY3QsIGBzdGF0ZWAuIE1heSBoYXBwZW4gYXQgc29tZSBwb2ludCBpbiB0aGUgZnV0dXJlLFxuICAgICAqIGFjY29yZGluZyB0byB0aGUgYGRlbGF5YCBwYXJhbWV0ZXIsIGlmIHNwZWNpZmllZC5cbiAgICAgKiBAcGFyYW0ge1R9IFtzdGF0ZV0gU29tZSBjb250ZXh0dWFsIGRhdGEgdGhhdCB0aGUgYHdvcmtgIGZ1bmN0aW9uIHVzZXMgd2hlblxuICAgICAqIGNhbGxlZCBieSB0aGUgU2NoZWR1bGVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVsYXldIFRpbWUgdG8gd2FpdCBiZWZvcmUgZXhlY3V0aW5nIHRoZSB3b3JrLCB3aGVyZSB0aGVcbiAgICAgKiB0aW1lIHVuaXQgaXMgaW1wbGljaXQgYW5kIGRlZmluZWQgYnkgdGhlIFNjaGVkdWxlci5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBBY3Rpb247XG59KFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbikpO1xuZXhwb3J0cy5BY3Rpb24gPSBBY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpb24uanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcnhqcy9zY2hlZHVsZXIvQWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFNjaGVkdWxlcl8xID0gcmVxdWlyZSgnLi4vU2NoZWR1bGVyJyk7XG52YXIgQXN5bmNTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcigpIHtcbiAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgdGhlIFNjaGVkdWxlciBpcyBjdXJyZW50bHkgZXhlY3V0aW5nIGEgYmF0Y2ggb2ZcbiAgICAgICAgICogcXVldWVkIGFjdGlvbnMuXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGludGVybmFsIElEIHVzZWQgdG8gdHJhY2sgdGhlIGxhdGVzdCBhc3luY2hyb25vdXMgdGFzayBzdWNoIGFzIHRob3NlXG4gICAgICAgICAqIGNvbWluZyBmcm9tIGBzZXRUaW1lb3V0YCwgYHNldEludGVydmFsYCwgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAsIGFuZFxuICAgICAgICAgKiBvdGhlcnMuXG4gICAgICAgICAqIEB0eXBlIHthbnl9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSk7IC8vIGV4aGF1c3QgdGhlIHNjaGVkdWxlciBxdWV1ZVxuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlIChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFNjaGVkdWxlcl8xLlNjaGVkdWxlcikpO1xuZXhwb3J0cy5Bc3luY1NjaGVkdWxlciA9IEFzeW5jU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTY2hlZHVsZXIuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcnhqcy9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanNcbi8vIG1vZHVsZSBpZCA9IDMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBBbiBleGVjdXRpb24gY29udGV4dCBhbmQgYSBkYXRhIHN0cnVjdHVyZSB0byBvcmRlciB0YXNrcyBhbmQgc2NoZWR1bGUgdGhlaXJcbiAqIGV4ZWN1dGlvbi4gUHJvdmlkZXMgYSBub3Rpb24gb2YgKHBvdGVudGlhbGx5IHZpcnR1YWwpIHRpbWUsIHRocm91Z2ggdGhlXG4gKiBgbm93KClgIGdldHRlciBtZXRob2QuXG4gKlxuICogRWFjaCB1bml0IG9mIHdvcmsgaW4gYSBTY2hlZHVsZXIgaXMgY2FsbGVkIGFuIHtAbGluayBBY3Rpb259LlxuICpcbiAqIGBgYHRzXG4gKiBjbGFzcyBTY2hlZHVsZXIge1xuICogICBub3coKTogbnVtYmVyO1xuICogICBzY2hlZHVsZSh3b3JrLCBkZWxheT8sIHN0YXRlPyk6IFN1YnNjcmlwdGlvbjtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBjbGFzcyBTY2hlZHVsZXJcbiAqL1xudmFyIFNjaGVkdWxlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2NoZWR1bGVyKFNjaGVkdWxlckFjdGlvbiwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkgeyBub3cgPSBTY2hlZHVsZXIubm93OyB9XG4gICAgICAgIHRoaXMuU2NoZWR1bGVyQWN0aW9uID0gU2NoZWR1bGVyQWN0aW9uO1xuICAgICAgICB0aGlzLm5vdyA9IG5vdztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVzIGEgZnVuY3Rpb24sIGB3b3JrYCwgZm9yIGV4ZWN1dGlvbi4gTWF5IGhhcHBlbiBhdCBzb21lIHBvaW50IGluXG4gICAgICogdGhlIGZ1dHVyZSwgYWNjb3JkaW5nIHRvIHRoZSBgZGVsYXlgIHBhcmFtZXRlciwgaWYgc3BlY2lmaWVkLiBNYXkgYmUgcGFzc2VkXG4gICAgICogc29tZSBjb250ZXh0IG9iamVjdCwgYHN0YXRlYCwgd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGB3b3JrYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIFRoZSBnaXZlbiBhcmd1bWVudHMgd2lsbCBiZSBwcm9jZXNzZWQgYW4gc3RvcmVkIGFzIGFuIEFjdGlvbiBvYmplY3QgaW4gYVxuICAgICAqIHF1ZXVlIG9mIGFjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0YXRlOiA/VCk6ID9TdWJzY3JpcHRpb259IHdvcmsgQSBmdW5jdGlvbiByZXByZXNlbnRpbmcgYVxuICAgICAqIHRhc2ssIG9yIHNvbWUgdW5pdCBvZiB3b3JrIHRvIGJlIGV4ZWN1dGVkIGJ5IHRoZSBTY2hlZHVsZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWxheV0gVGltZSB0byB3YWl0IGJlZm9yZSBleGVjdXRpbmcgdGhlIHdvcmssIHdoZXJlIHRoZVxuICAgICAqIHRpbWUgdW5pdCBpcyBpbXBsaWNpdCBhbmQgZGVmaW5lZCBieSB0aGUgU2NoZWR1bGVyIGl0c2VsZi5cbiAgICAgKiBAcGFyYW0ge1R9IFtzdGF0ZV0gU29tZSBjb250ZXh0dWFsIGRhdGEgdGhhdCB0aGUgYHdvcmtgIGZ1bmN0aW9uIHVzZXMgd2hlblxuICAgICAqIGNhbGxlZCBieSB0aGUgU2NoZWR1bGVyLlxuICAgICAqIEByZXR1cm4ge1N1YnNjcmlwdGlvbn0gQSBzdWJzY3JpcHRpb24gaW4gb3JkZXIgdG8gYmUgYWJsZSB0byB1bnN1YnNjcmliZVxuICAgICAqIHRoZSBzY2hlZHVsZWQgd29yay5cbiAgICAgKi9cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLlNjaGVkdWxlckFjdGlvbih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IERhdGUubm93ID8gRGF0ZS5ub3cgOiBmdW5jdGlvbiAoKSB7IHJldHVybiArbmV3IERhdGUoKTsgfTtcbiAgICByZXR1cm4gU2NoZWR1bGVyO1xufSgpKTtcbmV4cG9ydHMuU2NoZWR1bGVyID0gU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2NoZWR1bGVyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvU2NoZWR1bGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIE91dGVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vT3V0ZXJTdWJzY3JpYmVyJyk7XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbmV4cG9ydHMuZGVmYXVsdFRocm90dGxlQ29uZmlnID0ge1xuICAgIGxlYWRpbmc6IHRydWUsXG4gICAgdHJhaWxpbmc6IGZhbHNlXG59O1xuLyoqXG4gKiBFbWl0cyBhIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLCB0aGVuIGlnbm9yZXMgc3Vic2VxdWVudCBzb3VyY2VcbiAqIHZhbHVlcyBmb3IgYSBkdXJhdGlvbiBkZXRlcm1pbmVkIGJ5IGFub3RoZXIgT2JzZXJ2YWJsZSwgdGhlbiByZXBlYXRzIHRoaXNcbiAqIHByb2Nlc3MuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3MgbGlrZSB7QGxpbmsgdGhyb3R0bGVUaW1lfSwgYnV0IHRoZSBzaWxlbmNpbmdcbiAqIGR1cmF0aW9uIGlzIGRldGVybWluZWQgYnkgYSBzZWNvbmQgT2JzZXJ2YWJsZS48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy90aHJvdHRsZS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgdGhyb3R0bGVgIGVtaXRzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB2YWx1ZXMgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlXG4gKiB3aGVuIGl0cyBpbnRlcm5hbCB0aW1lciBpcyBkaXNhYmxlZCwgYW5kIGlnbm9yZXMgc291cmNlIHZhbHVlcyB3aGVuIHRoZSB0aW1lclxuICogaXMgZW5hYmxlZC4gSW5pdGlhbGx5LCB0aGUgdGltZXIgaXMgZGlzYWJsZWQuIEFzIHNvb24gYXMgdGhlIGZpcnN0IHNvdXJjZVxuICogdmFsdWUgYXJyaXZlcywgaXQgaXMgZm9yd2FyZGVkIHRvIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSwgYW5kIHRoZW4gdGhlIHRpbWVyXG4gKiBpcyBlbmFibGVkIGJ5IGNhbGxpbmcgdGhlIGBkdXJhdGlvblNlbGVjdG9yYCBmdW5jdGlvbiB3aXRoIHRoZSBzb3VyY2UgdmFsdWUsXG4gKiB3aGljaCByZXR1cm5zIHRoZSBcImR1cmF0aW9uXCIgT2JzZXJ2YWJsZS4gV2hlbiB0aGUgZHVyYXRpb24gT2JzZXJ2YWJsZSBlbWl0cyBhXG4gKiB2YWx1ZSBvciBjb21wbGV0ZXMsIHRoZSB0aW1lciBpcyBkaXNhYmxlZCwgYW5kIHRoaXMgcHJvY2VzcyByZXBlYXRzIGZvciB0aGVcbiAqIG5leHQgc291cmNlIHZhbHVlLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXQgY2xpY2tzIGF0IGEgcmF0ZSBvZiBhdCBtb3N0IG9uZSBjbGljayBwZXIgc2Vjb25kPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciByZXN1bHQgPSBjbGlja3MudGhyb3R0bGUoZXYgPT4gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKSk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIEBzZWUge0BsaW5rIGF1ZGl0fVxuICogQHNlZSB7QGxpbmsgZGVib3VuY2V9XG4gKiBAc2VlIHtAbGluayBkZWxheVdoZW59XG4gKiBAc2VlIHtAbGluayBzYW1wbGV9XG4gKiBAc2VlIHtAbGluayB0aHJvdHRsZVRpbWV9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCk6IFN1YnNjcmliYWJsZU9yUHJvbWlzZX0gZHVyYXRpb25TZWxlY3RvciBBIGZ1bmN0aW9uXG4gKiB0aGF0IHJlY2VpdmVzIGEgdmFsdWUgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUsIGZvciBjb21wdXRpbmcgdGhlIHNpbGVuY2luZ1xuICogZHVyYXRpb24gZm9yIGVhY2ggc291cmNlIHZhbHVlLCByZXR1cm5lZCBhcyBhbiBPYnNlcnZhYmxlIG9yIGEgUHJvbWlzZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgYSBjb25maWd1cmF0aW9uIG9iamVjdCB0byBkZWZpbmUgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIGJlaGF2aW9yLiBEZWZhdWx0c1xuICogdG8gYHsgbGVhZGluZzogdHJ1ZSwgdHJhaWxpbmc6IGZhbHNlIH1gLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IHBlcmZvcm1zIHRoZSB0aHJvdHRsZSBvcGVyYXRpb24gdG9cbiAqIGxpbWl0IHRoZSByYXRlIG9mIGVtaXNzaW9ucyBmcm9tIHRoZSBzb3VyY2UuXG4gKiBAbWV0aG9kIHRocm90dGxlXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiB0aHJvdHRsZShkdXJhdGlvblNlbGVjdG9yLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHsgY29uZmlnID0gZXhwb3J0cy5kZWZhdWx0VGhyb3R0bGVDb25maWc7IH1cbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBUaHJvdHRsZU9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IsIGNvbmZpZy5sZWFkaW5nLCBjb25maWcudHJhaWxpbmcpKTtcbn1cbmV4cG9ydHMudGhyb3R0bGUgPSB0aHJvdHRsZTtcbnZhciBUaHJvdHRsZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaHJvdHRsZU9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IsIGxlYWRpbmcsIHRyYWlsaW5nKSB7XG4gICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIHRoaXMubGVhZGluZyA9IGxlYWRpbmc7XG4gICAgICAgIHRoaXMudHJhaWxpbmcgPSB0cmFpbGluZztcbiAgICB9XG4gICAgVGhyb3R0bGVPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRocm90dGxlU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmR1cmF0aW9uU2VsZWN0b3IsIHRoaXMubGVhZGluZywgdGhpcy50cmFpbGluZykpO1xuICAgIH07XG4gICAgcmV0dXJuIFRocm90dGxlT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFRocm90dGxlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRocm90dGxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaHJvdHRsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGR1cmF0aW9uU2VsZWN0b3IsIF9sZWFkaW5nLCBfdHJhaWxpbmcpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIHRoaXMuZHVyYXRpb25TZWxlY3RvciA9IGR1cmF0aW9uU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuX2xlYWRpbmcgPSBfbGVhZGluZztcbiAgICAgICAgdGhpcy5fdHJhaWxpbmcgPSBfdHJhaWxpbmc7XG4gICAgICAgIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy50aHJvdHRsZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl90cmFpbGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyYWlsaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHRoaXMudHJ5RHVyYXRpb25TZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZCh0aGlzLnRocm90dGxlZCA9IHN1YnNjcmliZVRvUmVzdWx0XzEuc3Vic2NyaWJlVG9SZXN1bHQodGhpcywgZHVyYXRpb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9sZWFkaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHJhaWxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFzVHJhaWxpbmdWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYWlsaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUudHJ5RHVyYXRpb25TZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHVyYXRpb25TZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRocm90dGxlU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCB0aHJvdHRsZWQgPSBfYS50aHJvdHRsZWQsIF90cmFpbGluZ1ZhbHVlID0gX2EuX3RyYWlsaW5nVmFsdWUsIF9oYXNUcmFpbGluZ1ZhbHVlID0gX2EuX2hhc1RyYWlsaW5nVmFsdWUsIF90cmFpbGluZyA9IF9hLl90cmFpbGluZztcbiAgICAgICAgdGhpcy5fdHJhaWxpbmdWYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRocm90dGxlZCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUodGhyb3R0bGVkKTtcbiAgICAgICAgICAgIHRoaXMudGhyb3R0bGVkID0gbnVsbDtcbiAgICAgICAgICAgIHRocm90dGxlZC51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaHJvdHRsZVN1YnNjcmliZXIucHJvdG90eXBlLl9zZW5kVHJhaWxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGRlc3RpbmF0aW9uID0gX2EuZGVzdGluYXRpb24sIHRocm90dGxlZCA9IF9hLnRocm90dGxlZCwgX3RyYWlsaW5nID0gX2EuX3RyYWlsaW5nLCBfdHJhaWxpbmdWYWx1ZSA9IF9hLl90cmFpbGluZ1ZhbHVlLCBfaGFzVHJhaWxpbmdWYWx1ZSA9IF9hLl9oYXNUcmFpbGluZ1ZhbHVlO1xuICAgICAgICBpZiAodGhyb3R0bGVkICYmIF90cmFpbGluZyAmJiBfaGFzVHJhaWxpbmdWYWx1ZSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChfdHJhaWxpbmdWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLl90cmFpbGluZ1ZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2hhc1RyYWlsaW5nVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuX3NlbmRUcmFpbGluZygpO1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgVGhyb3R0bGVTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc2VuZFRyYWlsaW5nKCk7XG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gVGhyb3R0bGVTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXJfMS5PdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvb3BlcmF0b3IvdGhyb3R0bGUuanNcbi8vIG1vZHVsZSBpZCA9IDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi9TdWJzY3JpYmVyJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIE91dGVyU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE91dGVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPdXRlclN1YnNjcmliZXIoKSB7XG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnJvcik7XG4gICAgfTtcbiAgICBPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBPdXRlclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5leHBvcnRzLk91dGVyU3Vic2NyaWJlciA9IE91dGVyU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU91dGVyU3Vic2NyaWJlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL091dGVyU3Vic2NyaWJlci5qc1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcm9vdF8xID0gcmVxdWlyZSgnLi9yb290Jyk7XG52YXIgaXNBcnJheUxpa2VfMSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcbnZhciBpc1Byb21pc2VfMSA9IHJlcXVpcmUoJy4vaXNQcm9taXNlJyk7XG52YXIgaXNPYmplY3RfMSA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoJy4uL3N5bWJvbC9pdGVyYXRvcicpO1xudmFyIElubmVyU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vSW5uZXJTdWJzY3JpYmVyJyk7XG52YXIgb2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vc3ltYm9sL29ic2VydmFibGUnKTtcbmZ1bmN0aW9uIHN1YnNjcmliZVRvUmVzdWx0KG91dGVyU3Vic2NyaWJlciwgcmVzdWx0LCBvdXRlclZhbHVlLCBvdXRlckluZGV4KSB7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gbmV3IElubmVyU3Vic2NyaWJlcl8xLklubmVyU3Vic2NyaWJlcihvdXRlclN1YnNjcmliZXIsIG91dGVyVmFsdWUsIG91dGVySW5kZXgpO1xuICAgIGlmIChkZXN0aW5hdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkge1xuICAgICAgICBpZiAocmVzdWx0Ll9pc1NjYWxhcikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5zdWJzY3JpYmUoZGVzdGluYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlXzEuaXNBcnJheUxpa2UocmVzdWx0KSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmVzdWx0Lmxlbmd0aDsgaSA8IGxlbiAmJiAhZGVzdGluYXRpb24uY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQocmVzdWx0W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlc3RpbmF0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1Byb21pc2VfMS5pc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICByZXN1bHQudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghZGVzdGluYXRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZGVzdGluYXRpb24uZXJyb3IoZXJyKTsgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIC8vIEVzY2FwaW5nIHRoZSBQcm9taXNlIHRyYXA6IGdsb2JhbGx5IHRocm93IHVuaGFuZGxlZCBlcnJvcnNcbiAgICAgICAgICAgIHJvb3RfMS5yb290LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyB0aHJvdyBlcnI7IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdFtpdGVyYXRvcl8xLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSByZXN1bHRbaXRlcmF0b3JfMS5pdGVyYXRvcl0oKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAoaXRlbS5kb25lKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoaXRlbS52YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZGVzdGluYXRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdFtvYnNlcnZhYmxlXzEub2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIG9icyA9IHJlc3VsdFtvYnNlcnZhYmxlXzEub2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnMuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBvYmplY3QgZG9lcyBub3QgY29ycmVjdGx5IGltcGxlbWVudCBTeW1ib2wub2JzZXJ2YWJsZScpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKG5ldyBJbm5lclN1YnNjcmliZXJfMS5Jbm5lclN1YnNjcmliZXIob3V0ZXJTdWJzY3JpYmVyLCBvdXRlclZhbHVlLCBvdXRlckluZGV4KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGlzT2JqZWN0XzEuaXNPYmplY3QocmVzdWx0KSA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIHJlc3VsdCArIFwiJ1wiO1xuICAgICAgICB2YXIgbXNnID0gKFwiWW91IHByb3ZpZGVkIFwiICsgdmFsdWUgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuXCIpXG4gICAgICAgICAgICArICcgWW91IGNhbiBwcm92aWRlIGFuIE9ic2VydmFibGUsIFByb21pc2UsIEFycmF5LCBvciBJdGVyYWJsZS4nO1xuICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihuZXcgVHlwZUVycm9yKG1zZykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydHMuc3Vic2NyaWJlVG9SZXN1bHQgPSBzdWJzY3JpYmVUb1Jlc3VsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvUmVzdWx0LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdC5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLmlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL2lzQXJyYXlMaWtlLmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL2lzUHJvbWlzZS5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcm9vdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9yb290Jyk7XG5mdW5jdGlvbiBzeW1ib2xJdGVyYXRvclBvbnlmaWxsKHJvb3QpIHtcbiAgICB2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKCFTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgICAgIFN5bWJvbC5pdGVyYXRvciA9IFN5bWJvbCgnaXRlcmF0b3IgcG9seWZpbGwnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gW2ZvciBNb3ppbGxhIEdlY2tvIDI3LTM1Ol0oaHR0cHM6Ly9temwubGEvMmV3RTF6QylcbiAgICAgICAgdmFyIFNldF8xID0gcm9vdC5TZXQ7XG4gICAgICAgIGlmIChTZXRfMSAmJiB0eXBlb2YgbmV3IFNldF8xKClbJ0BAaXRlcmF0b3InXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgTWFwXzEgPSByb290Lk1hcDtcbiAgICAgICAgLy8gcmVxdWlyZWQgZm9yIGNvbXBhdGFiaWxpdHkgd2l0aCBlczYtc2hpbVxuICAgICAgICBpZiAoTWFwXzEpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTWFwXzEucHJvdG90eXBlKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIC8vIGFjY29yZGluZyB0byBzcGVjLCBNYXAucHJvdG90eXBlW0BAaXRlcmF0b3JdIGFuZCBNYXAub3JvdG90eXBlLmVudHJpZXMgbXVzdCBiZSBlcXVhbC5cbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAnZW50cmllcycgJiYga2V5ICE9PSAnc2l6ZScgJiYgTWFwXzEucHJvdG90eXBlW2tleV0gPT09IE1hcF8xLnByb3RvdHlwZVsnZW50cmllcyddKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxufVxuZXhwb3J0cy5zeW1ib2xJdGVyYXRvclBvbnlmaWxsID0gc3ltYm9sSXRlcmF0b3JQb255ZmlsbDtcbmV4cG9ydHMuaXRlcmF0b3IgPSBzeW1ib2xJdGVyYXRvclBvbnlmaWxsKHJvb3RfMS5yb290KTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGl0ZXJhdG9yIGluc3RlYWRcbiAqL1xuZXhwb3J0cy4kJGl0ZXJhdG9yID0gZXhwb3J0cy5pdGVyYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvc3ltYm9sL2l0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4vU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBJbm5lclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbm5lclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5uZXJTdWJzY3JpYmVyKHBhcmVudCwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMub3V0ZXJWYWx1ZSA9IG91dGVyVmFsdWU7XG4gICAgICAgIHRoaXMub3V0ZXJJbmRleCA9IG91dGVySW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIH1cbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeU5leHQodGhpcy5vdXRlclZhbHVlLCB2YWx1ZSwgdGhpcy5vdXRlckluZGV4LCB0aGlzLmluZGV4KyssIHRoaXMpO1xuICAgIH07XG4gICAgSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5RXJyb3IoZXJyb3IsIHRoaXMpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5Q29tcGxldGUodGhpcyk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBJbm5lclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5leHBvcnRzLklubmVyU3Vic2NyaWJlciA9IElubmVyU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlubmVyU3Vic2NyaWJlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL0lubmVyU3Vic2NyaWJlci5qc1xuLy8gbW9kdWxlIGlkID0gNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKCcuL1N1YmplY3QnKTtcbnZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xID0gcmVxdWlyZSgnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJyk7XG4vKipcbiAqIEBjbGFzcyBCZWhhdmlvclN1YmplY3Q8VD5cbiAqL1xudmFyIEJlaGF2aW9yU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJlaGF2aW9yU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCZWhhdmlvclN1YmplY3QoX3ZhbHVlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiAmJiAhc3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMudGhyb3duRXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xLk9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5leHQuY2FsbCh0aGlzLCB0aGlzLl92YWx1ZSA9IHZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBCZWhhdmlvclN1YmplY3Q7XG59KFN1YmplY3RfMS5TdWJqZWN0KSk7XG5leHBvcnRzLkJlaGF2aW9yU3ViamVjdCA9IEJlaGF2aW9yU3ViamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJlaGF2aW9yU3ViamVjdC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL0JlaGF2aW9yU3ViamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL09ic2VydmFibGUnKTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuL1N1YnNjcmliZXInKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7XG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMSA9IHJlcXVpcmUoJy4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvcicpO1xudmFyIFN1YmplY3RTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoJy4vU3ViamVjdFN1YnNjcmlwdGlvbicpO1xudmFyIHJ4U3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi9zeW1ib2wvcnhTdWJzY3JpYmVyJyk7XG4vKipcbiAqIEBjbGFzcyBTdWJqZWN0U3Vic2NyaWJlcjxUPlxuICovXG52YXIgU3ViamVjdFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJqZWN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5TdWJqZWN0U3Vic2NyaWJlciA9IFN1YmplY3RTdWJzY3JpYmVyO1xuLyoqXG4gKiBAY2xhc3MgU3ViamVjdDxUPlxuICovXG52YXIgU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50aHJvd25FcnJvciA9IG51bGw7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlW3J4U3Vic2NyaWJlcl8xLnJ4U3Vic2NyaWJlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3ViamVjdFN1YnNjcmliZXIodGhpcyk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgICAgIHN1YmplY3Qub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgICAgICB2YXIgbGVuID0gb2JzZXJ2ZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBjb3B5ID0gb2JzZXJ2ZXJzLnNsaWNlKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29weVtpXS5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb3B5W2ldLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlcnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xLk9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb3B5W2ldLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlcnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl90cnlTdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRoaXMudGhyb3duRXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN1YmplY3RTdWJzY3JpcHRpb25fMS5TdWJqZWN0U3Vic2NyaXB0aW9uKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5hc09ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5TdWJqZWN0ID0gU3ViamVjdDtcbi8qKlxuICogQGNsYXNzIEFub255bW91c1N1YmplY3Q8VD5cbiAqL1xudmFyIEFub255bW91c1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24ubmV4dCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24uZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiAmJiBkZXN0aW5hdGlvbi5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydHMuQW5vbnltb3VzU3ViamVjdCA9IEFub255bW91c1N1YmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3J4anMvU3ViamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFN1YmplY3RTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJqZWN0U3Vic2NyaXB0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpcHRpb24oc3ViamVjdCwgc3Vic2NyaWJlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVyID0gc3Vic2NyaWJlcjtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgU3ViamVjdFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSBzdWJqZWN0Lm9ic2VydmVycztcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFvYnNlcnZlcnMgfHwgb2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCB8fCBzdWJqZWN0LmlzU3RvcHBlZCB8fCBzdWJqZWN0LmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpYmVySW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZih0aGlzLnN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShzdWJzY3JpYmVySW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdFN1YnNjcmlwdGlvbjtcbn0oU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKSk7XG5leHBvcnRzLlN1YmplY3RTdWJzY3JpcHRpb24gPSBTdWJqZWN0U3Vic2NyaXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdFN1YnNjcmlwdGlvbi5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yeGpzL1N1YmplY3RTdWJzY3JpcHRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7XG4gIEFOSU1BVElPTl9EVVJBVElPTixcbiAgSEFORF9SQURJVVMsXG4gIFNDQUxFX0NFTlRFUl9YLFxuICBTQ0FMRV9DRU5URVJfWSxcbiAgU0NBTEVfRU5EX0FOR0xFLFxuICBTQ0FMRV9QQVRIX0NPVU5ULFxuICBTQ0FMRV9SQURJVVMsXG4gIFNDQUxFX1JBVElPLFxuICBTQ0FMRV9TVEFSVF9BTkdMRSxcbiAgVElDS1NfQ09VTlQsXG4gIFRJQ0tTX0lOREVOVCxcbiAgVElDS1NfTEVOR1RIXG59IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCBtYXRoU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9tYXRoLXNlcnZpY2UnO1xuaW1wb3J0IFNWR1NlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvc3ZnLXNlcnZpY2UnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4uL3N0cnVjdHVyZXMvcG9pbnQnO1xuaW1wb3J0IFNsaWNlIGZyb20gJy4uL3N0cnVjdHVyZXMvc2xpY2UnO1xuaW1wb3J0IGFuaW1hdGVVdGlsIGZyb20gJy4uL3V0aWxzL2FuaW1hdGUtdXRpbCc7XG5pbXBvcnQgRE9NVXRpbCBmcm9tICcuLi91dGlscy9kb20tdXRpbCc7XG5pbXBvcnQgeyBzbGlkZXJWYWx1ZSQgfSBmcm9tICcuLi91dGlscy9yeC11dGlsJztcbmltcG9ydCBFbGVtZW50cyBmcm9tICcuL2VsZW1lbnRzJztcblxuY2xhc3MgUmVuZGVyZXIge1xuICBwcml2YXRlIGN1cnJlbnRBbmdsZTogbnVtYmVyID0gKFxuICAgIFNDQUxFX0VORF9BTkdMRSAtIChTQ0FMRV9FTkRfQU5HTEUgLSBTQ0FMRV9TVEFSVF9BTkdMRSkgLyAyXG4gICk7XG5cbiAgcHJpdmF0ZSBjZW50cmFsQW5nbGUgPSBtYXRoU2VydmljZS5jYWxjQ2VudHJhbEFuZ2xlKFxuICAgIFNDQUxFX1NUQVJUX0FOR0xFLFxuICAgIFNDQUxFX0VORF9BTkdMRVxuICApO1xuXG4gIHByaXZhdGUgZWxlbWVudHM6IEVsZW1lbnRzO1xuXG4gIGNvbnN0cnVjdG9yKHN2Z0VsOiBTVkdFbGVtZW50KSB7XG4gICAgdGhpcy5lbGVtZW50cyA9IG5ldyBFbGVtZW50cyhzdmdFbCk7XG4gICAgdGhpcy5oYW5kbGVSb3RhdGluZygpO1xuICB9XG5cbiAgcHVibGljIHJlbmRlclNjYWxlKCkge1xuICAgIGNvbnN0IHNsaWNlcyA9IG1hdGhTZXJ2aWNlLmdlbmVyYXRlU2xpY2VzKFxuICAgICAgU0NBTEVfU1RBUlRfQU5HTEUsIFNDQUxFX0VORF9BTkdMRSwgU0NBTEVfUkFUSU9cbiAgICApO1xuXG4gICAgQXJyYXkuZnJvbSh0aGlzLmVsZW1lbnRzLmdhdWdlU2NhbGVFbGVtZW50cylcbiAgICAgIC5mb3JFYWNoKChlbCwgaW5keCkgPT4ge1xuICAgICAgICBjb25zdCBzbGljZSA9IHNsaWNlcy5uZXh0KCkudmFsdWU7XG5cbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKFxuICAgICAgICAgICdkJywgU1ZHU2VydmljZS5kZXNjcmliZUFyYyhcbiAgICAgICAgICAgIFNDQUxFX0NFTlRFUl9YLFxuICAgICAgICAgICAgU0NBTEVfQ0VOVEVSX1ksXG4gICAgICAgICAgICBTQ0FMRV9SQURJVVMsXG4gICAgICAgICAgICBzbGljZS5zdGFydEFuZ2xlLFxuICAgICAgICAgICAgc2xpY2UuZW5kQW5nbGVcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXJBeGlzKCkge1xuICAgIHRoaXMucmVuZGVyVGlja3MoKTtcbiAgICB0aGlzLnJlbmRlclRleHRzKCk7XG4gIH1cblxuICBwdWJsaWMgcmVuZGVySGFuZCgpIHtcbiAgICBjb25zdCBjaXJjbGVFbCA9IHRoaXMuZWxlbWVudHMuZ2F1Z2VIYW5kRWxlbWVudHMuc2hpZnQoKSxcbiAgICAgIGFycm93RWwgPSB0aGlzLmVsZW1lbnRzLmdhdWdlSGFuZEVsZW1lbnRzLnBvcCgpO1xuXG4gICAgY2lyY2xlRWwuc2V0QXR0cmlidXRlKCdjeCcsIFNDQUxFX0NFTlRFUl9YLnRvU3RyaW5nKCkpO1xuICAgIGNpcmNsZUVsLnNldEF0dHJpYnV0ZSgnY3knLCBTQ0FMRV9DRU5URVJfWS50b1N0cmluZygpKTtcbiAgICBjaXJjbGVFbC5zZXRBdHRyaWJ1dGUoJ3InLCBIQU5EX1JBRElVUy50b1N0cmluZygpKTtcblxuICAgIGFycm93RWwuc2V0QXR0cmlidXRlKCdkJywgU1ZHU2VydmljZS5kZXNjcmliZUhhbmQoXG4gICAgICBTQ0FMRV9DRU5URVJfWCxcbiAgICAgIFNDQUxFX0NFTlRFUl9ZLFxuICAgICAgU0NBTEVfUkFESVVTLFxuICAgICAgSEFORF9SQURJVVMsXG4gICAgICBUSUNLU19JTkRFTlQsXG4gICAgICBUSUNLU19MRU5HVEhcbiAgICApKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVSb3RhdGluZygpIHtcbiAgICBzbGlkZXJWYWx1ZSRcbiAgICAgIC50aHJvdHRsZVRpbWUoMjApXG4gICAgICAubWFwKChwb3NpdGlvbikgPT5cbiAgICAgICAgICBuZXcgU2xpY2UoXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRBbmdsZSxcbiAgICAgICAgICAgIFNDQUxFX0VORF9BTkdMRSAtIG1hdGhTZXJ2aWNlLmNhbGNSYXRpbyhcbiAgICAgICAgICAgICAgdGhpcy5jZW50cmFsQW5nbGUsXG4gICAgICAgICAgICAgIHBvc2l0aW9uXG4gICAgICAgICAgICApKVxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUodGhpcy5hbmltYXRlSGFuZCk7XG4gIH1cblxuICBwcml2YXRlIGFuaW1hdGVIYW5kID0gKHNsaWNlKSA9PiB7XG4gICAgYW5pbWF0ZVV0aWwuYW5pbWF0ZUhhbmQoXG4gICAgICAocm90YXRlQW5nbGUpID0+IHtcbiAgICAgICAgdGhpcy5lbGVtZW50cy5hcnJvd0VsLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJyxcbiAgICAgICAgICBTVkdTZXJ2aWNlLmRlc2NyaWJlUm90YXRpb24ocm90YXRlQW5nbGUpXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgc2xpY2UsXG4gICAgICB0aGlzLnNldEN1cnJlbnRBbmdsZVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlclRpY2tzKCkge1xuICAgIGNvbnN0IHRpY2tzID0gbWF0aFNlcnZpY2UuZ2VuZXJhdGVUaWNrcyhcbiAgICAgIFNDQUxFX0NFTlRFUl9YLFxuICAgICAgU0NBTEVfQ0VOVEVSX1ksXG4gICAgICBTQ0FMRV9TVEFSVF9BTkdMRSxcbiAgICAgIFNDQUxFX0VORF9BTkdMRSxcbiAgICAgIFNDQUxFX1JBRElVUyArIFRJQ0tTX0lOREVOVCxcbiAgICAgIFRJQ0tTX0NPVU5UXG4gICAgKTtcblxuICAgIEFycmF5LmZyb20odGhpcy5lbGVtZW50cy5nYXVnZUxpbmVzRWxlbWVudHMpXG4gICAgICAuZm9yRWFjaCgoZWwsIGkpID0+IHtcbiAgICAgICAgY29uc3QgYXR0ciA9IGVsLnNldEF0dHJpYnV0ZS5iaW5kKGVsKSxcbiAgICAgICAgICB0aWNrID0gdGlja3MubmV4dCgpLnZhbHVlO1xuXG4gICAgICAgIGF0dHIoJ3gxJywgdGljay5wMS54KTtcbiAgICAgICAgYXR0cigneTEnLCB0aWNrLnAxLnkpO1xuICAgICAgICBhdHRyKCd4MicsIHRpY2sucDIueCk7XG4gICAgICAgIGF0dHIoJ3kyJywgdGljay5wMi55KTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJUZXh0cygpIHtcbiAgICB0aGlzLmVsZW1lbnRzLmdhdWdlVGV4dFBhdGhFbC5zZXRBdHRyaWJ1dGUoXG4gICAgICAnZCcsIFNWR1NlcnZpY2UuZGVzY3JpYmVBcmMoXG4gICAgICAgIFNDQUxFX0NFTlRFUl9YLFxuICAgICAgICBTQ0FMRV9DRU5URVJfWSxcbiAgICAgICAgU0NBTEVfUkFESVVTICsgKDIgKiBUSUNLU19JTkRFTlQpICsgVElDS1NfTEVOR1RILFxuICAgICAgICBTQ0FMRV9TVEFSVF9BTkdMRSxcbiAgICAgICAgU0NBTEVfRU5EX0FOR0xFXG4gICAgICApXG4gICAgKTtcblxuICAgIGNvbnN0IHRleHRzID0gbWF0aFNlcnZpY2UuZ2VuZXJhdGVUZXh0cyhcbiAgICAgIFNDQUxFX0NFTlRFUl9YLFxuICAgICAgU0NBTEVfQ0VOVEVSX1ksXG4gICAgICBTQ0FMRV9SQURJVVMsXG4gICAgICBTQ0FMRV9TVEFSVF9BTkdMRSxcbiAgICAgIFNDQUxFX0VORF9BTkdMRSxcbiAgICAgIFRJQ0tTX0NPVU5ULFxuICAgICAgdGhpcy5lbGVtZW50cy5nYXVnZVNjYWxlTGVuZ3RoXG4gICAgKTtcblxuICAgIEFycmF5LmZyb20odGhpcy5lbGVtZW50cy5nYXVnZVRleHRzRWxlbWVudHMpXG4gICAgICAuZm9yRWFjaCgoZWwsIGk6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCB0ZXh0UGF0aEVsID0gZWwuZmlyc3RFbGVtZW50Q2hpbGQsXG4gICAgICAgICAgdGV4dCA9IHRleHRzLm5leHQoKS52YWx1ZTtcblxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3gnLCB0ZXh0LnBvc2l0aW9uLnRvU3RyaW5nKCkpO1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3RleHQtYW5jaG9yJywgJ3N0YXJ0Jyk7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgYFxuICAgICAgICAgIHRyYW5zbGF0ZSgkezIgKiB0ZXh0LnBvaW50Lnh9LDApXG4gICAgICAgICAgc2NhbGUoLTEsIDEpXG4gICAgICAgICAgcm90YXRlKCR7dGV4dC5kZWdyZWV9ICR7dGV4dC5wb2ludC54fSAke3RleHQucG9pbnQueX0pXG4gICAgICAgIGApO1xuXG4gICAgICAgIHRleHRQYXRoRWwuc2V0QXR0cmlidXRlKCdocmVmJywgJyNnYXVnZS10ZXh0LXBhdGgnKTtcbiAgICAgICAgdGV4dFBhdGhFbC50ZXh0Q29udGVudCA9IHRleHQuY29udGVudDtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRDdXJyZW50QW5nbGUgPSAoYW5nbGUpID0+IHtcbiAgICB0aGlzLmN1cnJlbnRBbmdsZSA9IGFuZ2xlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlbmRlcmVyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXIhLi9zcmMvZ2F1Z2UvcmVuZGVyZXIudHMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb2ludCBpbXBsZW1lbnRzIElQb2ludCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB4OiBudW1iZXIgPSAwLFxuICAgIHB1YmxpYyB5OiBudW1iZXIgPSAwXG4gICkge31cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyIS4vc3JjL3N0cnVjdHVyZXMvcG9pbnQudHMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0IGltcGxlbWVudHMgSVRleHQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcG9zaXRpb246IG51bWJlcixcbiAgICBwdWJsaWMgY29udGVudDogc3RyaW5nLFxuICAgIHB1YmxpYyBwb2ludDogSVBvaW50LFxuICAgIHB1YmxpYyBkZWdyZWU6IG51bWJlclxuICApIHtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXIhLi9zcmMvc3RydWN0dXJlcy90ZXh0LnRzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGljayBpbXBsZW1lbnRzIElUaWNrIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHAxOiBJUG9pbnQsXG4gICAgcHVibGljIHAyOiBJUG9pbnRcbiAgKSB7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyIS4vc3JjL3N0cnVjdHVyZXMvdGljay50cyIsImltcG9ydCB7XG4gIERSQVdfQUNDVVJBQ1ksXG4gIFNDQUxFX0NFTlRFUl9YLFxuICBTQ0FMRV9DRU5URVJfWSxcbiAgU0NBTEVfRU5EX0FOR0xFXG59IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCBQb2ludCBmcm9tICcuLi9zdHJ1Y3R1cmVzL3BvaW50JztcbmltcG9ydCBtYXRoU2VydmljZSBmcm9tICcuL21hdGgtc2VydmljZSc7XG5cbmNsYXNzIFNWR1NlcnZpY2Uge1xuICBwdWJsaWMgZGVzY3JpYmVBcmMgPSAoXG4gICAgY2VudGVyWDogbnVtYmVyID0gMCxcbiAgICBjZW50ZXJZOiBudW1iZXIgPSAwLFxuICAgIHJhZGl1czogbnVtYmVyID0gMCxcbiAgICBzdGFydEFuZ2xlOiBudW1iZXIgPSAwLFxuICAgIGVuZEFuZ2xlOiBudW1iZXIgPSAwXG4gICk6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgY2VudHJhbEFuZ2xlID0gbWF0aFNlcnZpY2UuY2FsY0NlbnRyYWxBbmdsZShzdGFydEFuZ2xlLCBlbmRBbmdsZSksXG4gICAgICB0b0NhcnRlc2lhbiA9IG1hdGhTZXJ2aWNlLnBvbGFyVG9DYXJ0ZXNpYW4uYmluZChtYXRoU2VydmljZSwgY2VudGVyWCwgY2VudGVyWSksXG4gICAgICBwb2ludHNDb3VudCA9IE1hdGguY2VpbChjZW50cmFsQW5nbGUgLyBEUkFXX0FDQ1VSQUNZKTtcblxuICAgIGxldCBhbmdsZSA9IHN0YXJ0QW5nbGU7XG5cbiAgICByZXR1cm4gbmV3IEFycmF5KHBvaW50c0NvdW50KVxuICAgICAgLmZpbGwoMClcbiAgICAgIC5yZWR1Y2UoXG4gICAgICAgIChwb2ludHM6IHN0cmluZ1tdKSA9PiB7XG4gICAgICAgICAgY29uc3QgcG9pbnQgPSB0b0NhcnRlc2lhbihyYWRpdXMsIGFuZ2xlKTtcbiAgICAgICAgICBhbmdsZSArPSBEUkFXX0FDQ1VSQUNZO1xuXG4gICAgICAgICAgcmV0dXJuIFsuLi5wb2ludHMsIFsgYCR7cG9pbnQueH0sJHtwb2ludC55fWBdXTtcbiAgICAgICAgfSxcbiAgICAgICAgWydNJ11cbiAgICAgIClcbiAgICAgIC5qb2luKCcgJyk7XG4gIH1cblxuICBwdWJsaWMgZGVzY3JpYmVIYW5kID0gKFxuICAgIGNlbnRlclg6IG51bWJlcixcbiAgICBjZW50ZXJZOiBudW1iZXIsXG4gICAgc2NhbGVSYWRpdXM6IG51bWJlcixcbiAgICBoYW5kUmFkaXVzOiBudW1iZXIsXG4gICAgdGlja3NJbmRlbnQ6IG51bWJlcixcbiAgICB0aWNrc0xlbmd0aDogbnVtYmVyXG4gICk6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgcG9pbnQgPSBtYXRoU2VydmljZS5wb2xhclRvQ2FydGVzaWFuKFxuICAgICAgY2VudGVyWCwgY2VudGVyWSwgc2NhbGVSYWRpdXMgKyB0aWNrc0luZGVudCArIHRpY2tzTGVuZ3RoLCBNYXRoLlBJIC8gMlxuICAgICk7XG5cbiAgICByZXR1cm4gYFxuICAgICAgTSR7Y2VudGVyWCAtIGhhbmRSYWRpdXMgLyAyfSAke2NlbnRlcll9XG4gICAgICBMJHtwb2ludC54fSAgICAgICAgICAgICAgICAgICR7cG9pbnQueX0sXG4gICAgICBMJHtjZW50ZXJYICsgaGFuZFJhZGl1cyAvIDJ9ICR7Y2VudGVyWX1cbiAgICAgIFpcbiAgICBgO1xuICB9XG5cbiAgcHVibGljIGRlc2NyaWJlUm90YXRpb24gPSAocm90YXRlQW5nbGU6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIGBcbiAgICAgIHRyYW5zbGF0ZSgkezIgKiBTQ0FMRV9DRU5URVJfWH0sMClcbiAgICAgIHNjYWxlKC0xLCAxKVxuICAgICAgcm90YXRlKFxuICAgICAgICAke21hdGhTZXJ2aWNlLnJhZGlhbnNUb0hhbmRQb3NpdGlvbihyb3RhdGVBbmdsZSl9XG4gICAgICAgICR7U0NBTEVfQ0VOVEVSX1h9ICR7U0NBTEVfQ0VOVEVSX1l9XG4gICAgICApXG4gICAgYDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHU2VydmljZSgpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXIhLi9zcmMvc2VydmljZXMvc3ZnLXNlcnZpY2UudHMiLCJpbXBvcnQge1xuICBBTklNQVRJT05fRFVSQVRJT04sXG4gIEFOSU1BVElPTl9SQVRJT1xufSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgbWF0aFNlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvbWF0aC1zZXJ2aWNlJztcbmltcG9ydCBTVkdTZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL3N2Zy1zZXJ2aWNlJztcblxuY2xhc3MgQW5pbWF0ZVV0aWwge1xuICBwcml2YXRlIGFuaW1hdGlvbklkOiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgbW92ZW1lbnRBbmltYXRpb246IElBbmltYXRpb24gPSB7XG4gICAgZHVyYXRpb246IDc1MCxcbiAgICBmbjogKGZ1bmN0aW9uKHNsaWNlOiBJU2xpY2UsIHRpbWU6IG51bWJlcik6IFRBbmdsZSB7XG4gICAgICByZXR1cm4gc2xpY2Uuc3RhcnRBbmdsZSArXG4gICAgICAgIHNsaWNlLmRpcmVjdGlvbigpICogKHRpbWUgLyB0aGlzLmR1cmF0aW9uKSAqIHNsaWNlLnNlZ21lbnQoKTtcbiAgICB9KSxcbiAgfTtcblxuICBwcml2YXRlIHNoYWtpbmdBbmltYXRpb246IElBbmltYXRpb24gPSB7XG4gICAgZHVyYXRpb246IDM1MCxcbiAgICBmbjogKGZ1bmN0aW9uKHNsaWNlOiBJU2xpY2UsIHRpbWU6IG51bWJlcik6IFRBbmdsZSB7XG4gICAgICByZXR1cm4gc2xpY2UuZW5kQW5nbGUgK1xuICAgICAgICBzbGljZS5lbXB0eSgpICogbWF0aFNlcnZpY2UuZGFtcGluZyh0aW1lIC8gdGhpcy5kdXJhdGlvbik7XG4gICAgfSlcbiAgfTtcblxuICBwcml2YXRlIGFuaW1hdGlvbnM6IElBbmltYXRpb25bXSA9IFtcbiAgICB0aGlzLm1vdmVtZW50QW5pbWF0aW9uLFxuICAgIHRoaXMuc2hha2luZ0FuaW1hdGlvblxuICBdO1xuXG4gIHB1YmxpYyBhbmltYXRlSGFuZChkZXNjcmliZXIsIHNsaWNlLCBjb21wbGV0ZSkge1xuICAgIHRoaXMuY2FuY2VsQW5pbWF0aW9uKCk7XG5cbiAgICB0aGlzLmFuaW1hdGlvbnMucmVkdWNlKChzZXF1ZW5jZTogUHJvbWlzZTxhbnk+LCBhbmltYXRpb246IElBbmltYXRpb24pID0+XG4gICAgICBzZXF1ZW5jZS50aGVuKCgpID0+XG4gICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PlxuICAgICAgICAgIHRoaXMuYW5pbWF0ZShcbiAgICAgICAgICAgICh0aW1lKSA9PiBkZXNjcmliZXIoYW5pbWF0aW9uLmZuKHNsaWNlLCB0aW1lKSksXG4gICAgICAgICAgICBhbmltYXRpb24uZHVyYXRpb24sXG4gICAgICAgICAgICByZXNvbHZlXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgUHJvbWlzZS5yZXNvbHZlKClcbiAgICApLnRoZW4oKCkgPT4gY29tcGxldGUoc2xpY2UuZW5kQW5nbGUpKTtcbiAgfVxuXG4gIHByaXZhdGUgYW5pbWF0ZShoYW5kbGVyLCBkdXJhdGlvbiwgY29tcGxldGUpIHtcbiAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgY29uc3QgcnVuID0gKHRpbWVzdGFtcCkgPT4ge1xuICAgICAgbGV0IHRpbWVQYXNzZWQgPSBNYXRoLmFicyh0aW1lc3RhbXAgLSBzdGFydCk7XG5cbiAgICAgIHRpbWVQYXNzZWQgPSB0aW1lUGFzc2VkIDwgZHVyYXRpb24gP1xuICAgICAgICB0aW1lUGFzc2VkIDogZHVyYXRpb247XG5cbiAgICAgIGhhbmRsZXIodGltZVBhc3NlZCk7XG5cbiAgICAgIHRpbWVQYXNzZWQgPCBkdXJhdGlvbiA/XG4gICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbihydW4pIDogY29tcGxldGUoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5yZXF1ZXN0QW5pbWF0aW9uKHJ1bik7XG4gIH1cblxuICBwcml2YXRlIHJlcXVlc3RBbmltYXRpb24oZm4pIHtcbiAgICB0aGlzLmFuaW1hdGlvbklkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTtcbiAgfVxuXG4gIHByaXZhdGUgY2FuY2VsQW5pbWF0aW9uKCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uSWQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBBbmltYXRlVXRpbCgpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXIhLi9zcmMvdXRpbHMvYW5pbWF0ZS11dGlsLnRzIiwiaW1wb3J0IHtcbiAgU0NBTEVfUEFUSF9DT1VOVCxcbiAgVElDS1NfQ09VTlRcbn0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IERPTVV0aWwgZnJvbSAnLi4vdXRpbHMvZG9tLXV0aWwnO1xuXG5jbGFzcyBFbGVtZW50cyB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzdmdFbDogU1ZHRWxlbWVudCkge1xuICB9XG5cbiAgcHVibGljIGdldCBnYXVnZVNjYWxlRWxlbWVudHMoKTogU1ZHRWxlbWVudFtdIHtcbiAgICBpZiAoIXRoaXMuZ2F1Z2VTY2FsZUdyb3VwRWwuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICB0aGlzLmdhdWdlU2NhbGVHcm91cEVsLmFwcGVuZENoaWxkKFxuICAgICAgICBET01VdGlsLmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCBTQ0FMRV9QQVRIX0NPVU5UKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW10uc2xpY2UuY2FsbCh0aGlzLmdhdWdlU2NhbGVHcm91cEVsLmNoaWxkcmVuKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZ2F1Z2VMaW5lc0VsZW1lbnRzKCk6IFNWR0VsZW1lbnRbXSB7XG4gICAgaWYgKCF0aGlzLmdhdWdlTGluZXNHcm91cEVsLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgdGhpcy5nYXVnZUxpbmVzR3JvdXBFbC5hcHBlbmRDaGlsZChcbiAgICAgICAgRE9NVXRpbC5jcmVhdGVFbGVtZW50KCdsaW5lJywgVElDS1NfQ09VTlQpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBbXS5zbGljZS5jYWxsKHRoaXMuZ2F1Z2VMaW5lc0dyb3VwRWwuY2hpbGRyZW4pO1xuICB9XG5cbiAgcHVibGljIGdldCBnYXVnZVRleHRzRWxlbWVudHMoKTogU1ZHRWxlbWVudFtdIHtcbiAgICBpZiAoIXRoaXMuZ2F1Z2VUZXh0c0dyb3VwRWwuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICB0aGlzLmdhdWdlVGV4dHNHcm91cEVsLmFwcGVuZENoaWxkKFxuICAgICAgICBET01VdGlsLmNyZWF0ZUVsZW1lbnQoJ3RleHQnLCBUSUNLU19DT1VOVClcbiAgICAgICk7XG5cbiAgICAgIEFycmF5LmZyb20odGhpcy5nYXVnZVRleHRzR3JvdXBFbC5jaGlsZHJlbilcbiAgICAgICAgLmZvckVhY2goKGVsKSA9PiBlbC5hcHBlbmRDaGlsZChET01VdGlsLmNyZWF0ZUVsZW1lbnQoJ3RleHRQYXRoJykpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW10uc2xpY2UuY2FsbCh0aGlzLmdhdWdlVGV4dHNHcm91cEVsLmNoaWxkcmVuKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZ2F1Z2VIYW5kRWxlbWVudHMoKTogU1ZHRWxlbWVudFtdIHtcbiAgICBpZiAoIXRoaXMuZ2F1Z2VIYW5kR3JvdXBFbC5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgIHRoaXMuZ2F1Z2VIYW5kR3JvdXBFbC5hcHBlbmRDaGlsZChET01VdGlsLmNyZWF0ZUVsZW1lbnQoJ2NpcmNsZScpKTtcbiAgICAgIHRoaXMuZ2F1Z2VIYW5kR3JvdXBFbC5hcHBlbmRDaGlsZChET01VdGlsLmNyZWF0ZUVsZW1lbnQoJ3BhdGgnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwodGhpcy5nYXVnZUhhbmRHcm91cEVsLmNoaWxkcmVuKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYXJyb3dFbCgpOiBTVkdFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5nYXVnZUhhbmRFbGVtZW50cy5wb3AoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZ2F1Z2VTY2FsZUdyb3VwRWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ZnRWwucXVlcnlTZWxlY3RvcignI2dhdWdlLXNjYWxlLWdyb3VwJyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGdhdWdlQXhpc0dyb3VwRWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ZnRWwucXVlcnlTZWxlY3RvcignI2dhdWdlLWF4aXMtZ3JvdXAnKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZ2F1Z2VMaW5lc0dyb3VwRWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ZnRWwucXVlcnlTZWxlY3RvcignI2dhdWdlLWxpbmVzLWdyb3VwJyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGdhdWdlVGV4dHNHcm91cEVsKCkge1xuICAgIHJldHVybiB0aGlzLnN2Z0VsLnF1ZXJ5U2VsZWN0b3IoJyNnYXVnZS10ZXh0cy1ncm91cCcpO1xuICB9XG5cbiAgcHVibGljIGdldCBnYXVnZVRleHRQYXRoRWwoKTogU1ZHUGF0aEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLnN2Z0VsLnF1ZXJ5U2VsZWN0b3IoJyNnYXVnZS10ZXh0LXBhdGgnKSBhcyBTVkdQYXRoRWxlbWVudDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZ2F1Z2VTY2FsZUxlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmdhdWdlVGV4dFBhdGhFbC5nZXRUb3RhbExlbmd0aCgpO1xuICB9XG5cbiAgcHVibGljIGdldCBnYXVnZUhhbmRHcm91cEVsKCkge1xuICAgIHJldHVybiB0aGlzLnN2Z0VsLnF1ZXJ5U2VsZWN0b3IoJyNnYXVnZS1oYW5kLWdyb3VwJyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRWxlbWVudHM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlciEuL3NyYy9nYXVnZS9lbGVtZW50cy50cyIsIm1vZHVsZS5leHBvcnRzID0gXCI6aG9zdCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGhlaWdodDogMzIwcHg7XFxuICB3aWR0aDogNDgwcHg7XFxufVxcblxcbi5nYXVnZSB7XFxuICB0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLC0xKTtcXG59XFxuXFxuI2dhdWdlLXNjYWxlLWdyb3VwID4gcGF0aCB7XFxuICBmaWxsOiB0cmFuc3BhcmVudDtcXG4gIHN0cm9rZS13aWR0aDogNDtcXG4gIHN0cm9rZS1saW5lY2FwOiBzcXVhcmU7XFxufVxcblxcbiNnYXVnZS1zY2FsZS1ncm91cCA+IHBhdGg6bnRoLWNoaWxkKDEpIHtcXG4gIHN0cm9rZTogI2ZiMDAwZTtcXG59XFxuXFxuI2dhdWdlLXNjYWxlLWdyb3VwID4gcGF0aDpudGgtY2hpbGQoMikge1xcbiAgc3Ryb2tlOiAjZmQ5NDA5O1xcbn1cXG5cXG4jZ2F1Z2Utc2NhbGUtZ3JvdXAgPiBwYXRoOm50aC1jaGlsZCgzKSB7XFxuICBzdHJva2U6ICM1MzUzNTM7XFxufVxcblxcbiNnYXVnZS1saW5lcy1ncm91cCA+IGxpbmUge1xcbiAgZmlsbDogbm9uZTtcXG4gIHN0cm9rZS13aWR0aDogMjtcXG4gIHN0cm9rZS1saW5lY2FwOiByb3VuZDtcXG4gIHN0cm9rZTogIzcyNzI3MjtcXG59XFxuXFxuI2dhdWdlLXRleHRzLWdyb3VwID4gdGV4dCB7XFxuICBmb250LWZhbWlseTogTHVjaWRhIENvbnNvbGUsIENvdXJpZXIsIG1vbm9zcGFjZTtcXG59XFxuXFxuI2dhdWdlLWhhbmQtZ3JvdXAgPiBjaXJjbGUsXFxuI2dhdWdlLWhhbmQtZ3JvdXAgPiBwYXRoIHtcXG4gIGZpbGw6ICMxZDg0ZGQ7XFxufVxcblwiXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvZ2F1Z2Uvc3R5bGVzLmNzc1xuLy8gbW9kdWxlIGlkID0gNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQgXCI8c3ZnIHZlcnNpb249JzEuMSdcXG4gIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcXG4gIHZpZXdCb3g9JzAgMCA0ODAgMzIwJ1xcbiAgY2xhc3M9J2dhdWdlJ1xcbiAgd2lkdGg9JzEwMCUnXFxuICBoZWlnaHQ9JzEwMCUnXFxuPlxcbiAgPHRpdGxlPlNWRyBHYXVnZTwvdGl0bGU+XFxuICA8ZGVmcz5cXG4gICAgPHBhdGggaWQ9XFxcImdhdWdlLXRleHQtcGF0aFxcXCIvPlxcbiAgPC9kZWZzPlxcblxcbiAgPGcgaWQ9J2dhdWdlLXNjYWxlLWdyb3VwJz48L2c+XFxuXFxuICA8ZyBpZD0nZ2F1Z2UtYXhpcy1ncm91cCc+XFxuICAgIDxnIGlkPSdnYXVnZS1saW5lcy1ncm91cCc+PC9nPlxcbiAgICA8ZyBpZD0nZ2F1Z2UtdGV4dHMtZ3JvdXAnPjwvZz5cXG4gIDwvZz5cXG4gIDxnIGlkPSdnYXVnZS1oYW5kLWdyb3VwJz48L2c+XFxuPC9zdmc+XFxuXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvZ2F1Z2UvdGVtcGxhdGUuaHRtbFxuLy8gbW9kdWxlIGlkID0gNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==